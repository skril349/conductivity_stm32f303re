
HAL_UDEMY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007400  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c0  080077c0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080077c0  080077c0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077c0  080077c0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080077c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000001f4  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115c0  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002080  00000000  00000000  00031684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  00033708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd0  00000000  00000000  000345a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022393  00000000  00000000  00035370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a9f  00000000  00000000  00057703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4805  00000000  00000000  0006a1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e9a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004820  00000000  00000000  0013e9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007588 	.word	0x08007588

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08007588 	.word	0x08007588

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <delay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/***************************DS18B20FUNCTIONS****************************************/
void delay (uint16_t time)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <delay+0x30>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 8000bde:	bf00      	nop
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <delay+0x30>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3f9      	bcc.n	8000be0 <delay+0x14>
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000014c 	.word	0x2000014c

08000c00 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c1c:	887b      	ldrh	r3, [r7, #2]
 8000c1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f002 fb26 	bl	8003280 <HAL_GPIO_Init>
}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f002 fb08 	bl	8003280 <HAL_GPIO_Init>
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <DS18B20_Start>:

#define DS18B20_PORT GPIOB
#define DS18B20_PIN GPIO_PIN_1

uint8_t DS18B20_Start (void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8000c82:	2102      	movs	r1, #2
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <DS18B20_Start+0x5c>)
 8000c86:	f7ff ffbb 	bl	8000c00 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <DS18B20_Start+0x5c>)
 8000c90:	f002 fc98 	bl	80035c4 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8000c94:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000c98:	f7ff ff98 	bl	8000bcc <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <DS18B20_Start+0x5c>)
 8000ca0:	f7ff ffcc 	bl	8000c3c <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8000ca4:	2050      	movs	r0, #80	; 0x50
 8000ca6:	f7ff ff91 	bl	8000bcc <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8000caa:	2102      	movs	r1, #2
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <DS18B20_Start+0x5c>)
 8000cae:	f002 fc71 	bl	8003594 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <DS18B20_Start+0x46>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	e001      	b.n	8000cc2 <DS18B20_Start+0x4a>
	else Response = -1;
 8000cbe:	23ff      	movs	r3, #255	; 0xff
 8000cc0:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 8000cc2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000cc6:	f7ff ff81 	bl	8000bcc <delay>

	return Response;
 8000cca:	79fb      	ldrb	r3, [r7, #7]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	481e      	ldr	r0, [pc, #120]	; (8000d60 <DS18B20_Write+0x88>)
 8000ce6:	f7ff ff8b 	bl	8000c00 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e02e      	b.n	8000d4e <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8000cf0:	79fa      	ldrb	r2, [r7, #7]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	fa42 f303 	asr.w	r3, r2, r3
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d013      	beq.n	8000d28 <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8000d00:	2102      	movs	r1, #2
 8000d02:	4817      	ldr	r0, [pc, #92]	; (8000d60 <DS18B20_Write+0x88>)
 8000d04:	f7ff ff7c 	bl	8000c00 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	4814      	ldr	r0, [pc, #80]	; (8000d60 <DS18B20_Write+0x88>)
 8000d0e:	f002 fc59 	bl	80035c4 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff ff5a 	bl	8000bcc <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4811      	ldr	r0, [pc, #68]	; (8000d60 <DS18B20_Write+0x88>)
 8000d1c:	f7ff ff8e 	bl	8000c3c <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8000d20:	2032      	movs	r0, #50	; 0x32
 8000d22:	f7ff ff53 	bl	8000bcc <delay>
 8000d26:	e00f      	b.n	8000d48 <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8000d28:	2102      	movs	r1, #2
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <DS18B20_Write+0x88>)
 8000d2c:	f7ff ff68 	bl	8000c00 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8000d30:	2200      	movs	r2, #0
 8000d32:	2102      	movs	r1, #2
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <DS18B20_Write+0x88>)
 8000d36:	f002 fc45 	bl	80035c4 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8000d3a:	2032      	movs	r0, #50	; 0x32
 8000d3c:	f7ff ff46 	bl	8000bcc <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000d40:	2102      	movs	r1, #2
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <DS18B20_Write+0x88>)
 8000d44:	f7ff ff7a 	bl	8000c3c <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	ddcd      	ble.n	8000cf0 <DS18B20_Write+0x18>
		}
	}
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	48000400 	.word	0x48000400

08000d64 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8000d6e:	2102      	movs	r1, #2
 8000d70:	481e      	ldr	r0, [pc, #120]	; (8000dec <DS18B20_Read+0x88>)
 8000d72:	f7ff ff63 	bl	8000c3c <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	e02e      	b.n	8000dda <DS18B20_Read+0x76>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	481b      	ldr	r0, [pc, #108]	; (8000dec <DS18B20_Read+0x88>)
 8000d80:	f7ff ff3e 	bl	8000c00 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8000d84:	2200      	movs	r2, #0
 8000d86:	2102      	movs	r1, #2
 8000d88:	4818      	ldr	r0, [pc, #96]	; (8000dec <DS18B20_Read+0x88>)
 8000d8a:	f002 fc1b 	bl	80035c4 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff ff1c 	bl	8000bcc <delay>
		state = HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN);
 8000d94:	2102      	movs	r1, #2
 8000d96:	4815      	ldr	r0, [pc, #84]	; (8000dec <DS18B20_Read+0x88>)
 8000d98:	f002 fbfc 	bl	8003594 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <DS18B20_Read+0x8c>)
 8000da2:	601a      	str	r2, [r3, #0]
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8000da4:	2102      	movs	r1, #2
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <DS18B20_Read+0x88>)
 8000da8:	f7ff ff48 	bl	8000c3c <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8000dac:	2102      	movs	r1, #2
 8000dae:	480f      	ldr	r0, [pc, #60]	; (8000dec <DS18B20_Read+0x88>)
 8000db0:	f002 fbf0 	bl	8003594 <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d009      	beq.n	8000dce <DS18B20_Read+0x6a>
		{
			value |= 1<<i;  // read = 1
 8000dba:	2201      	movs	r2, #1
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	b25a      	sxtb	r2, r3
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8000dce:	2032      	movs	r0, #50	; 0x32
 8000dd0:	f7ff fefc 	bl	8000bcc <delay>
	for (int i=0;i<8;i++)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b07      	cmp	r3, #7
 8000dde:	ddcd      	ble.n	8000d7c <DS18B20_Read+0x18>
	}
	return value;
 8000de0:	79fb      	ldrb	r3, [r7, #7]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	48000400 	.word	0x48000400
 8000df0:	20000220 	.word	0x20000220

08000df4 <__io_putchar>:
    static float compECsolution;

	int modeIndex = 0;

	int __io_putchar(int ch)
	{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *) &ch , 1, 10);
 8000dfc:	1d39      	adds	r1, r7, #4
 8000dfe:	230a      	movs	r3, #10
 8000e00:	2201      	movs	r2, #1
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <__io_putchar+0x20>)
 8000e04:	f004 fe40 	bl	8005a88 <HAL_UART_Transmit>
		return ch;
 8000e08:	687b      	ldr	r3, [r7, #4]
	}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000198 	.word	0x20000198

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1c:	f001 f8ce 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e20:	f000 f980 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e24:	f000 fb5c 	bl	80014e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e28:	f000 faf4 	bl	8001414 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000e2c:	f000 fa5e 	bl	80012ec <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e30:	f000 f9de 	bl	80011f0 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000e34:	f000 fab8 	bl	80013a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000e38:	489f      	ldr	r0, [pc, #636]	; (80010b8 <main+0x2a0>)
 8000e3a:	f004 f975 	bl	8005128 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim6);
 8000e3e:	489f      	ldr	r0, [pc, #636]	; (80010bc <main+0x2a4>)
 8000e40:	f004 f90a 	bl	8005058 <HAL_TIM_Base_Start>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2028      	movs	r0, #40	; 0x28
 8000e4a:	f002 f9e2 	bl	8003212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e4e:	2028      	movs	r0, #40	; 0x28
 8000e50:	f002 f9fb 	bl	800324a <HAL_NVIC_EnableIRQ>
  adc_start();
 8000e54:	f000 fbb4 	bl	80015c0 <adc_start>
  HAL_UART_Transmit(&huart2, (uint8_t *) message , 20, 100);
 8000e58:	2364      	movs	r3, #100	; 0x64
 8000e5a:	2214      	movs	r2, #20
 8000e5c:	4998      	ldr	r1, [pc, #608]	; (80010c0 <main+0x2a8>)
 8000e5e:	4899      	ldr	r0, [pc, #612]	; (80010c4 <main+0x2ac>)
 8000e60:	f004 fe12 	bl	8005a88 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000e64:	200a      	movs	r0, #10
 8000e66:	f001 f90f 	bl	8002088 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  message[0]=0;
 8000e6a:	4b95      	ldr	r3, [pc, #596]	; (80010c0 <main+0x2a8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]


	  Presence = DS18B20_Start ();
 8000e70:	f7ff ff02 	bl	8000c78 <DS18B20_Start>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b93      	ldr	r3, [pc, #588]	; (80010c8 <main+0x2b0>)
 8000e7a:	701a      	strb	r2, [r3, #0]
	  	  HAL_Delay (1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f001 f903 	bl	8002088 <HAL_Delay>
	  	  DS18B20_Write (0xCC);  // skip ROM
 8000e82:	20cc      	movs	r0, #204	; 0xcc
 8000e84:	f7ff ff28 	bl	8000cd8 <DS18B20_Write>
	  	  DS18B20_Write (0x44);  // convert t
 8000e88:	2044      	movs	r0, #68	; 0x44
 8000e8a:	f7ff ff25 	bl	8000cd8 <DS18B20_Write>
	  	  HAL_Delay (800);
 8000e8e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000e92:	f001 f8f9 	bl	8002088 <HAL_Delay>

	  	  Presence = DS18B20_Start ();
 8000e96:	f7ff feef 	bl	8000c78 <DS18B20_Start>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b8a      	ldr	r3, [pc, #552]	; (80010c8 <main+0x2b0>)
 8000ea0:	701a      	strb	r2, [r3, #0]
	        HAL_Delay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f001 f8f0 	bl	8002088 <HAL_Delay>
	        DS18B20_Write (0xCC);  // skip ROM
 8000ea8:	20cc      	movs	r0, #204	; 0xcc
 8000eaa:	f7ff ff15 	bl	8000cd8 <DS18B20_Write>
	        DS18B20_Write (0xBE);  // Read Scratch-pad
 8000eae:	20be      	movs	r0, #190	; 0xbe
 8000eb0:	f7ff ff12 	bl	8000cd8 <DS18B20_Write>

	        Temp_byte1 = DS18B20_Read();
 8000eb4:	f7ff ff56 	bl	8000d64 <DS18B20_Read>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b83      	ldr	r3, [pc, #524]	; (80010cc <main+0x2b4>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	  	  Temp_byte2 = DS18B20_Read();
 8000ec0:	f7ff ff50 	bl	8000d64 <DS18B20_Read>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b81      	ldr	r3, [pc, #516]	; (80010d0 <main+0x2b8>)
 8000eca:	701a      	strb	r2, [r3, #0]
	  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8000ecc:	4b80      	ldr	r3, [pc, #512]	; (80010d0 <main+0x2b8>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	4b7d      	ldr	r3, [pc, #500]	; (80010cc <main+0x2b4>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b7c      	ldr	r3, [pc, #496]	; (80010d4 <main+0x2bc>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	  	  Temperature = (float)TEMP/16;
 8000ee4:	4b7b      	ldr	r3, [pc, #492]	; (80010d4 <main+0x2bc>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef8:	4b77      	ldr	r3, [pc, #476]	; (80010d8 <main+0x2c0>)
 8000efa:	edc3 7a00 	vstr	s15, [r3]
	  	  _temperature = Temperature;
 8000efe:	4b76      	ldr	r3, [pc, #472]	; (80010d8 <main+0x2c0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a76      	ldr	r2, [pc, #472]	; (80010dc <main+0x2c4>)
 8000f04:	6013      	str	r3, [r2, #0]


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_value = HAL_ADC_GetValue(&hadc1);
 8000f06:	4876      	ldr	r0, [pc, #472]	; (80010e0 <main+0x2c8>)
 8000f08:	f001 fbf2 	bl	80026f0 <HAL_ADC_GetValue>
 8000f0c:	ee07 0a90 	vmov	s15, r0
 8000f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f14:	4b73      	ldr	r3, [pc, #460]	; (80010e4 <main+0x2cc>)
 8000f16:	edc3 7a00 	vstr	s15, [r3]
	  voltage = sensor_value/4096.0*3300;
 8000f1a:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <main+0x2cc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb12 	bl	8000548 <__aeabi_f2d>
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <main+0x2d0>)
 8000f2a:	f7ff fc8f 	bl	800084c <__aeabi_ddiv>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	a35c      	add	r3, pc, #368	; (adr r3, 80010a8 <main+0x290>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb5c 	bl	80005f8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fdf0 	bl	8000b2c <__aeabi_d2f>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a67      	ldr	r2, [pc, #412]	; (80010ec <main+0x2d4>)
 8000f50:	6013      	str	r3, [r2, #0]
	  _rawEC = 1000*voltage/RES2/ECREF;
 8000f52:	4b66      	ldr	r3, [pc, #408]	; (80010ec <main+0x2d4>)
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80010f0 <main+0x2d8>
 8000f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f60:	ee17 0a90 	vmov	r0, s15
 8000f64:	f7ff faf0 	bl	8000548 <__aeabi_f2d>
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	4b61      	ldr	r3, [pc, #388]	; (80010f4 <main+0x2dc>)
 8000f6e:	f7ff fc6d 	bl	800084c <__aeabi_ddiv>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b5e      	ldr	r3, [pc, #376]	; (80010f8 <main+0x2e0>)
 8000f80:	f7ff fc64 	bl	800084c <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fdce 	bl	8000b2c <__aeabi_d2f>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <main+0x2e4>)
 8000f94:	6013      	str	r3, [r2, #0]
	  valueTemp = _rawEC*_kvalue;
 8000f96:	4b59      	ldr	r3, [pc, #356]	; (80010fc <main+0x2e4>)
 8000f98:	ed93 7a00 	vldr	s14, [r3]
 8000f9c:	4b58      	ldr	r3, [pc, #352]	; (8001100 <main+0x2e8>)
 8000f9e:	edd3 7a00 	vldr	s15, [r3]
 8000fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa6:	4b57      	ldr	r3, [pc, #348]	; (8001104 <main+0x2ec>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]

	  if(valueTemp > 2.5){
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <main+0x2ec>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8000fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	dd04      	ble.n	8000fca <main+0x1b2>
	          _kvalue = _kvalueHigh;
 8000fc0:	4b51      	ldr	r3, [pc, #324]	; (8001108 <main+0x2f0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a4e      	ldr	r2, [pc, #312]	; (8001100 <main+0x2e8>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e00d      	b.n	8000fe6 <main+0x1ce>
	      }else if(valueTemp < 2.0){
 8000fca:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <main+0x2ec>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fdc:	d503      	bpl.n	8000fe6 <main+0x1ce>
	          _kvalue = _kvalueLow;
 8000fde:	4b4b      	ldr	r3, [pc, #300]	; (800110c <main+0x2f4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a47      	ldr	r2, [pc, #284]	; (8001100 <main+0x2e8>)
 8000fe4:	6013      	str	r3, [r2, #0]
	      }

	  value = _rawEC * _kvalue;
 8000fe6:	4b45      	ldr	r3, [pc, #276]	; (80010fc <main+0x2e4>)
 8000fe8:	ed93 7a00 	vldr	s14, [r3]
 8000fec:	4b44      	ldr	r3, [pc, #272]	; (8001100 <main+0x2e8>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff6:	4b46      	ldr	r3, [pc, #280]	; (8001110 <main+0x2f8>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
	  value = value / (1.0+0.0185*(Temperature-25.0));
 8000ffc:	4b44      	ldr	r3, [pc, #272]	; (8001110 <main+0x2f8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff faa1 	bl	8000548 <__aeabi_f2d>
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <main+0x2c0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <main+0x2fc>)
 800101a:	f7ff f935 	bl	8000288 <__aeabi_dsub>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	a322      	add	r3, pc, #136	; (adr r3, 80010b0 <main+0x298>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fae4 	bl	80005f8 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <main+0x300>)
 800103e:	f7ff f925 	bl	800028c <__adddf3>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4620      	mov	r0, r4
 8001048:	4629      	mov	r1, r5
 800104a:	f7ff fbff 	bl	800084c <__aeabi_ddiv>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fd69 	bl	8000b2c <__aeabi_d2f>
 800105a:	4603      	mov	r3, r0
 800105c:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <main+0x2f8>)
 800105e:	6013      	str	r3, [r2, #0]
	  _ecvalue = value;
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <main+0x2f8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a2d      	ldr	r2, [pc, #180]	; (800111c <main+0x304>)
 8001066:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 8001068:	200a      	movs	r0, #10
 800106a:	f001 f80d 	bl	8002088 <HAL_Delay>
	  HAL_UART_Receive(&huart2, (uint8_t *) message2, 20 , 100);
 800106e:	2364      	movs	r3, #100	; 0x64
 8001070:	2214      	movs	r2, #20
 8001072:	492b      	ldr	r1, [pc, #172]	; (8001120 <main+0x308>)
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <main+0x2ac>)
 8001076:	f004 fd9b 	bl	8005bb0 <HAL_UART_Receive>

	  analizeCMD(voltage, Temperature, message2);
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <main+0x2d4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa62 	bl	8000548 <__aeabi_f2d>
 8001084:	4604      	mov	r4, r0
 8001086:	460d      	mov	r5, r1
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <main+0x2c0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa5b 	bl	8000548 <__aeabi_f2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4822      	ldr	r0, [pc, #136]	; (8001120 <main+0x308>)
 8001098:	ec43 2b11 	vmov	d1, r2, r3
 800109c:	ec45 4b10 	vmov	d0, r4, r5
 80010a0:	f000 fd3a 	bl	8001b18 <analizeCMD>
  {
 80010a4:	e6e1      	b.n	8000e6a <main+0x52>
 80010a6:	bf00      	nop
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40a9c800 	.word	0x40a9c800
 80010b0:	fbe76c8b 	.word	0xfbe76c8b
 80010b4:	3f92f1a9 	.word	0x3f92f1a9
 80010b8:	20000100 	.word	0x20000100
 80010bc:	2000014c 	.word	0x2000014c
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000198 	.word	0x20000198
 80010c8:	20000228 	.word	0x20000228
 80010cc:	2000021c 	.word	0x2000021c
 80010d0:	2000021d 	.word	0x2000021d
 80010d4:	2000021e 	.word	0x2000021e
 80010d8:	20000224 	.word	0x20000224
 80010dc:	20000020 	.word	0x20000020
 80010e0:	200000b0 	.word	0x200000b0
 80010e4:	20000258 	.word	0x20000258
 80010e8:	40b00000 	.word	0x40b00000
 80010ec:	20000240 	.word	0x20000240
 80010f0:	447a0000 	.word	0x447a0000
 80010f4:	4089a000 	.word	0x4089a000
 80010f8:	40690000 	.word	0x40690000
 80010fc:	2000024c 	.word	0x2000024c
 8001100:	20000014 	.word	0x20000014
 8001104:	20000254 	.word	0x20000254
 8001108:	2000001c 	.word	0x2000001c
 800110c:	20000018 	.word	0x20000018
 8001110:	20000250 	.word	0x20000250
 8001114:	40390000 	.word	0x40390000
 8001118:	3ff00000 	.word	0x3ff00000
 800111c:	20000244 	.word	0x20000244
 8001120:	2000022c 	.word	0x2000022c

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0a6      	sub	sp, #152	; 0x98
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800112e:	2228      	movs	r2, #40	; 0x28
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f005 f9be 	bl	80064b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2258      	movs	r2, #88	; 0x58
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f005 f9b0 	bl	80064b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001154:	2302      	movs	r3, #2
 8001156:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115c:	2310      	movs	r3, #16
 800115e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800116c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001170:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fa68 	bl	8003658 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800118e:	f000 fd05 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ac:	2101      	movs	r1, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 faa6 	bl	8004700 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011ba:	f000 fcef 	bl	8001b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SystemClock_Config+0xc8>)
 80011c0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80011c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4618      	mov	r0, r3
 80011d4:	f003 fcca 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011de:	f000 fcdd 	bl	8001b9c <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3798      	adds	r7, #152	; 0x98
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	00200082 	.word	0x00200082

080011f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN ADC1_Init 1 */
  __HAL_RCC_ADC1_CLK_ENABLE();
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <MX_ADC1_Init+0xf4>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a33      	ldr	r2, [pc, #204]	; (80012e4 <MX_ADC1_Init+0xf4>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <MX_ADC1_Init+0xf4>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <MX_ADC1_Init+0xf8>)
 800122c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001230:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001234:	2200      	movs	r2, #0
 8001236:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <MX_ADC1_Init+0xf8>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001246:	2201      	movs	r2, #1
 8001248:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <MX_ADC1_Init+0xf8>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001254:	2200      	movs	r2, #0
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_ADC1_Init+0xf8>)
 800125a:	2201      	movs	r2, #1
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001266:	2201      	movs	r2, #1
 8001268:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_ADC1_Init+0xf8>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001274:	2204      	movs	r2, #4
 8001276:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_ADC1_Init+0xf8>)
 800127a:	2200      	movs	r2, #0
 800127c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001284:	4818      	ldr	r0, [pc, #96]	; (80012e8 <MX_ADC1_Init+0xf8>)
 8001286:	f000 ff23 	bl	80020d0 <HAL_ADC_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8001290:	f000 fc84 	bl	8001b9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <MX_ADC1_Init+0xf8>)
 80012a0:	f001 fd20 	bl	8002ce4 <HAL_ADCEx_MultiModeConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80012aa:	f000 fc77 	bl	8001b9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_ADC1_Init+0xf8>)
 80012cc:	f001 fa1e 	bl	800270c <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80012d6:	f000 fc61 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	200000b0 	.word	0x200000b0

080012ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
	__HAL_RCC_TIM3_CLK_ENABLE();
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_TIM3_Init+0xb0>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a29      	ldr	r2, [pc, #164]	; (800139c <MX_TIM3_Init+0xb0>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <MX_TIM3_Init+0xb0>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_TIM3_Init+0xb4>)
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <MX_TIM3_Init+0xb8>)
 8001326:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM3_Init+0xb4>)
 800132a:	f240 623f 	movw	r2, #1599	; 0x63f
 800132e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_TIM3_Init+0xb4>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM3_Init+0xb4>)
 8001338:	f241 3287 	movw	r2, #4999	; 0x1387
 800133c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_TIM3_Init+0xb4>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_TIM3_Init+0xb4>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800134a:	4815      	ldr	r0, [pc, #84]	; (80013a0 <MX_TIM3_Init+0xb4>)
 800134c:	f003 fe2c 	bl	8004fa8 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001356:	f000 fc21 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	4619      	mov	r1, r3
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <MX_TIM3_Init+0xb4>)
 8001368:	f004 f86d 	bl	8005446 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001372:	f000 fc13 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM3_Init+0xb4>)
 8001384:	f004 fa88 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800138e:	f000 fc05 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	20000100 	.word	0x20000100
 80013a4:	40000400 	.word	0x40000400

080013a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <MX_TIM6_Init+0x64>)
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <MX_TIM6_Init+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48-1;
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <MX_TIM6_Init+0x64>)
 80013c0:	222f      	movs	r2, #47	; 0x2f
 80013c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_TIM6_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xFFFF;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_TIM6_Init+0x64>)
 80013cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_TIM6_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_TIM6_Init+0x64>)
 80013da:	f003 fde5 	bl	8004fa8 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80013e4:	f000 fbda 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_TIM6_Init+0x64>)
 80013f6:	f004 fa4f 	bl	8005898 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001400:	f000 fbcc 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000014c 	.word	0x2000014c
 8001410:	40001000 	.word	0x40001000

08001414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <MX_USART2_UART_Init+0xc0>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a29      	ldr	r2, [pc, #164]	; (80014d4 <MX_USART2_UART_Init+0xc0>)
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	6153      	str	r3, [r2, #20]
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <MX_USART2_UART_Init+0xc0>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_USART2_CLK_ENABLE();
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <MX_USART2_UART_Init+0xc0>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <MX_USART2_UART_Init+0xc0>)
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_USART2_UART_Init+0xc0>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 800145a:	230c      	movs	r3, #12
 800145c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001462:	2307      	movs	r3, #7
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4619      	mov	r1, r3
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f001 ff02 	bl	8003280 <HAL_GPIO_Init>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 800147e:	4a17      	ldr	r2, [pc, #92]	; (80014dc <MX_USART2_UART_Init+0xc8>)
 8001480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_USART2_UART_Init+0xc4>)
 80014bc:	f004 fa96 	bl	80059ec <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART2_UART_Init+0xb6>
  {
    Error_Handler();
 80014c6:	f000 fb69 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	20000198 	.word	0x20000198
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <MX_GPIO_Init+0xc4>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <MX_GPIO_Init+0xc4>)
 80014fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001518:	6153      	str	r3, [r2, #20]
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_GPIO_Init+0xc4>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <MX_GPIO_Init+0xc4>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	6153      	str	r3, [r2, #20]
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <MX_GPIO_Init+0xc4>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6153      	str	r3, [r2, #20]
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_GPIO_Init+0xc4>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2120      	movs	r1, #32
 800155a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155e:	f002 f831 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001568:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <MX_GPIO_Init+0xc8>)
 800157a:	f001 fe81 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800157e:	2320      	movs	r3, #32
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f001 fe72 	bl	8003280 <HAL_GPIO_Init>

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000800 	.word	0x48000800

080015ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	//printf("timer function callback\r\n");
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <adc_start>:
{
	return HAL_ADC_GetValue(&hadc1);
}

void adc_start(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	MX_ADC1_Init();
 80015c4:	f7ff fe14 	bl	80011f0 <MX_ADC1_Init>
	HAL_ADC_Start(&hadc1);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <adc_start+0x14>)
 80015ca:	f000 ff7b 	bl	80024c4 <HAL_ADC_Start>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000b0 	.word	0x200000b0

080015d8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
	//calback de la interrupció
	if(GPIO_Pin == GPIO_PIN_13){
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e8:	d104      	bne.n	80015f4 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80015ea:	2120      	movs	r1, #32
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f0:	f002 f800 	bl	80035f4 <HAL_GPIO_TogglePin>
	}
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001600:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001604:	f002 f810 	bl	8003628 <HAL_GPIO_EXTI_IRQHandler>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <calibration>:


////////////////////////////////////////////////////////////////////////////////////

void calibration(float voltage, float temperature,int modeIndex)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	ed87 0a03 	vstr	s0, [r7, #12]
 8001616:	edc7 0a02 	vstr	s1, [r7, #8]
 800161a:	6078      	str	r0, [r7, #4]
    _voltage = voltage;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <calibration+0x2c>)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6013      	str	r3, [r2, #0]
    _temperature = Temperature;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <calibration+0x30>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a06      	ldr	r2, [pc, #24]	; (8001640 <calibration+0x34>)
 8001628:	6013      	str	r3, [r2, #0]
    ecCalibration(modeIndex);                     //if received Serial CMD from the serial monitor, enter into the calibration mode
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f80c 	bl	8001648 <ecCalibration>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000248 	.word	0x20000248
 800163c:	20000224 	.word	0x20000224
 8001640:	20000020 	.word	0x20000020
 8001644:	00000000 	.word	0x00000000

08001648 <ecCalibration>:




void ecCalibration(int mode)
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
    char *receivedBufferPtr;
    static int ecCalibrationFinish  = 0;
    static int enterCalibrationFlag = 0;
    switch(mode){
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b03      	cmp	r3, #3
 8001654:	f200 822b 	bhi.w	8001aae <ecCalibration+0x466>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <ecCalibration+0x18>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001671 	.word	0x08001671
 8001664:	08001683 	.word	0x08001683
 8001668:	080016a9 	.word	0x080016a9
 800166c:	08001a15 	.word	0x08001a15
        case 0:
        if(enterCalibrationFlag){
 8001670:	4b89      	ldr	r3, [pc, #548]	; (8001898 <ecCalibration+0x250>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8215 	beq.w	8001aa4 <ecCalibration+0x45c>
            printf((">>>Command Error<<<"));
 800167a:	4888      	ldr	r0, [pc, #544]	; (800189c <ecCalibration+0x254>)
 800167c:	f004 ff22 	bl	80064c4 <iprintf>
        }
        break;
 8001680:	e210      	b.n	8001aa4 <ecCalibration+0x45c>
        case 1:
        enterCalibrationFlag = 1;
 8001682:	4b85      	ldr	r3, [pc, #532]	; (8001898 <ecCalibration+0x250>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
        ecCalibrationFinish  = 0;
 8001688:	4b85      	ldr	r3, [pc, #532]	; (80018a0 <ecCalibration+0x258>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
        printf("\n");
 800168e:	200a      	movs	r0, #10
 8001690:	f004 ff30 	bl	80064f4 <putchar>
        printf((">>>Enter EC Calibration Mode<<<\n"));
 8001694:	4883      	ldr	r0, [pc, #524]	; (80018a4 <ecCalibration+0x25c>)
 8001696:	f004 ffb1 	bl	80065fc <puts>
        printf((">>>Please put the probe into the 1413us/cm or 12.88ms/cm buffer solution<<<\n"));
 800169a:	4883      	ldr	r0, [pc, #524]	; (80018a8 <ecCalibration+0x260>)
 800169c:	f004 ffae 	bl	80065fc <puts>
        printf("\n");
 80016a0:	200a      	movs	r0, #10
 80016a2:	f004 ff27 	bl	80064f4 <putchar>
        break;
 80016a6:	e202      	b.n	8001aae <ecCalibration+0x466>
        case 2:

		  Presence = DS18B20_Start ();
 80016a8:	f7ff fae6 	bl	8000c78 <DS18B20_Start>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b7e      	ldr	r3, [pc, #504]	; (80018ac <ecCalibration+0x264>)
 80016b2:	701a      	strb	r2, [r3, #0]
		  HAL_Delay (1);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f000 fce7 	bl	8002088 <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 80016ba:	20cc      	movs	r0, #204	; 0xcc
 80016bc:	f7ff fb0c 	bl	8000cd8 <DS18B20_Write>
		  DS18B20_Write (0x44);  // convert t
 80016c0:	2044      	movs	r0, #68	; 0x44
 80016c2:	f7ff fb09 	bl	8000cd8 <DS18B20_Write>
		  HAL_Delay (800);
 80016c6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80016ca:	f000 fcdd 	bl	8002088 <HAL_Delay>

		  Presence = DS18B20_Start ();
 80016ce:	f7ff fad3 	bl	8000c78 <DS18B20_Start>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b75      	ldr	r3, [pc, #468]	; (80018ac <ecCalibration+0x264>)
 80016d8:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f000 fcd4 	bl	8002088 <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 80016e0:	20cc      	movs	r0, #204	; 0xcc
 80016e2:	f7ff faf9 	bl	8000cd8 <DS18B20_Write>
		  DS18B20_Write (0xBE);  // Read Scratch-pad
 80016e6:	20be      	movs	r0, #190	; 0xbe
 80016e8:	f7ff faf6 	bl	8000cd8 <DS18B20_Write>

		  Temp_byte1 = DS18B20_Read();
 80016ec:	f7ff fb3a 	bl	8000d64 <DS18B20_Read>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <ecCalibration+0x268>)
 80016f6:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DS18B20_Read();
 80016f8:	f7ff fb34 	bl	8000d64 <DS18B20_Read>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b6c      	ldr	r3, [pc, #432]	; (80018b4 <ecCalibration+0x26c>)
 8001702:	701a      	strb	r2, [r3, #0]
		  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8001704:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <ecCalibration+0x26c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	b21a      	sxth	r2, r3
 800170c:	4b68      	ldr	r3, [pc, #416]	; (80018b0 <ecCalibration+0x268>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b21b      	sxth	r3, r3
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <ecCalibration+0x270>)
 800171a:	801a      	strh	r2, [r3, #0]
		  Temperature = (float)TEMP/16;
 800171c:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <ecCalibration+0x270>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001728:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800172c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001730:	4b62      	ldr	r3, [pc, #392]	; (80018bc <ecCalibration+0x274>)
 8001732:	edc3 7a00 	vstr	s15, [r3]
		  _temperature = Temperature;
 8001736:	4b61      	ldr	r3, [pc, #388]	; (80018bc <ecCalibration+0x274>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a61      	ldr	r2, [pc, #388]	; (80018c0 <ecCalibration+0x278>)
 800173c:	6013      	str	r3, [r2, #0]
        if(enterCalibrationFlag){
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <ecCalibration+0x250>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 81b0 	beq.w	8001aa8 <ecCalibration+0x460>
            if((_rawEC>0.9)&&(_rawEC<1.9)){                         //recognize 1.413us/cm buffer solution
 8001748:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <ecCalibration+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe fefb 	bl	8000548 <__aeabi_f2d>
 8001752:	a345      	add	r3, pc, #276	; (adr r3, 8001868 <ecCalibration+0x220>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7ff f9de 	bl	8000b18 <__aeabi_dcmpgt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d03b      	beq.n	80017da <ecCalibration+0x192>
 8001762:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <ecCalibration+0x27c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	a340      	add	r3, pc, #256	; (adr r3, 8001870 <ecCalibration+0x228>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7ff f9b3 	bl	8000adc <__aeabi_dcmplt>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d02e      	beq.n	80017da <ecCalibration+0x192>
                compECsolution = 1.413*(1.0+0.0185*(_temperature-25.0));  //temperature compensation
 800177c:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <ecCalibration+0x278>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fee1 	bl	8000548 <__aeabi_f2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <ecCalibration+0x280>)
 800178c:	f7fe fd7c 	bl	8000288 <__aeabi_dsub>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a337      	add	r3, pc, #220	; (adr r3, 8001878 <ecCalibration+0x230>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff2b 	bl	80005f8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <ecCalibration+0x284>)
 80017b0:	f7fe fd6c 	bl	800028c <__adddf3>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a330      	add	r3, pc, #192	; (adr r3, 8001880 <ecCalibration+0x238>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7fe ff19 	bl	80005f8 <__aeabi_dmul>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f9ad 	bl	8000b2c <__aeabi_d2f>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <ecCalibration+0x288>)
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e082      	b.n	80018e0 <ecCalibration+0x298>
            }else if((_rawEC>9)&&(_rawEC<16.8)){                    //recognize 12.88ms/cm buffer solution
 80017da:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <ecCalibration+0x27c>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80017e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	dd72      	ble.n	80018d4 <ecCalibration+0x28c>
 80017ee:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <ecCalibration+0x27c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fea8 	bl	8000548 <__aeabi_f2d>
 80017f8:	a323      	add	r3, pc, #140	; (adr r3, 8001888 <ecCalibration+0x240>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7ff f96d 	bl	8000adc <__aeabi_dcmplt>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d065      	beq.n	80018d4 <ecCalibration+0x28c>
                compECsolution = 12.88*(1.0+0.0185*(_temperature-25.0));  //temperature compensation
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <ecCalibration+0x278>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe9b 	bl	8000548 <__aeabi_f2d>
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <ecCalibration+0x280>)
 8001818:	f7fe fd36 	bl	8000288 <__aeabi_dsub>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	a314      	add	r3, pc, #80	; (adr r3, 8001878 <ecCalibration+0x230>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe fee5 	bl	80005f8 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <ecCalibration+0x284>)
 800183c:	f7fe fd26 	bl	800028c <__adddf3>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	a311      	add	r3, pc, #68	; (adr r3, 8001890 <ecCalibration+0x248>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fed3 	bl	80005f8 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f967 	bl	8000b2c <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <ecCalibration+0x288>)
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e03c      	b.n	80018e0 <ecCalibration+0x298>
 8001866:	bf00      	nop
 8001868:	cccccccd 	.word	0xcccccccd
 800186c:	3feccccc 	.word	0x3feccccc
 8001870:	66666666 	.word	0x66666666
 8001874:	3ffe6666 	.word	0x3ffe6666
 8001878:	fbe76c8b 	.word	0xfbe76c8b
 800187c:	3f92f1a9 	.word	0x3f92f1a9
 8001880:	e353f7cf 	.word	0xe353f7cf
 8001884:	3ff69ba5 	.word	0x3ff69ba5
 8001888:	cccccccd 	.word	0xcccccccd
 800188c:	4030cccc 	.word	0x4030cccc
 8001890:	5c28f5c3 	.word	0x5c28f5c3
 8001894:	4029c28f 	.word	0x4029c28f
 8001898:	20000268 	.word	0x20000268
 800189c:	080075a0 	.word	0x080075a0
 80018a0:	2000026c 	.word	0x2000026c
 80018a4:	080075b4 	.word	0x080075b4
 80018a8:	080075d4 	.word	0x080075d4
 80018ac:	20000228 	.word	0x20000228
 80018b0:	2000021c 	.word	0x2000021c
 80018b4:	2000021d 	.word	0x2000021d
 80018b8:	2000021e 	.word	0x2000021e
 80018bc:	20000224 	.word	0x20000224
 80018c0:	20000020 	.word	0x20000020
 80018c4:	2000024c 	.word	0x2000024c
 80018c8:	40390000 	.word	0x40390000
 80018cc:	3ff00000 	.word	0x3ff00000
 80018d0:	20000260 	.word	0x20000260
            }else{
                printf((">>>Buffer Solution Error Try Again<<< <\n  "));
 80018d4:	4880      	ldr	r0, [pc, #512]	; (8001ad8 <ecCalibration+0x490>)
 80018d6:	f004 fdf5 	bl	80064c4 <iprintf>
                ecCalibrationFinish = 0;
 80018da:	4b80      	ldr	r3, [pc, #512]	; (8001adc <ecCalibration+0x494>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
            }
            KValueTemp = RES2*ECREF*compECsolution/1000.0/voltage;       //calibrate the k value
 80018e0:	4b7f      	ldr	r3, [pc, #508]	; (8001ae0 <ecCalibration+0x498>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe2f 	bl	8000548 <__aeabi_f2d>
 80018ea:	a373      	add	r3, pc, #460	; (adr r3, 8001ab8 <ecCalibration+0x470>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fe82 	bl	80005f8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <ecCalibration+0x49c>)
 8001902:	f7fe ffa3 	bl	800084c <__aeabi_ddiv>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4614      	mov	r4, r2
 800190c:	461d      	mov	r5, r3
 800190e:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <ecCalibration+0x4a0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fe18 	bl	8000548 <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe ff94 	bl	800084c <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f8fe 	bl	8000b2c <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <ecCalibration+0x4a4>)
 8001934:	6013      	str	r3, [r2, #0]
            if((KValueTemp>0.5) && (KValueTemp<1.5)){
 8001936:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <ecCalibration+0x4a4>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	dd57      	ble.n	80019fa <ecCalibration+0x3b2>
 800194a:	4b68      	ldr	r3, [pc, #416]	; (8001aec <ecCalibration+0x4a4>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d54d      	bpl.n	80019fa <ecCalibration+0x3b2>
                printf("\n");
 800195e:	200a      	movs	r0, #10
 8001960:	f004 fdc8 	bl	80064f4 <putchar>
                printf(">>>Successful,K:%d\n",KValueTemp);
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <ecCalibration+0x4a4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fded 	bl	8000548 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	485f      	ldr	r0, [pc, #380]	; (8001af0 <ecCalibration+0x4a8>)
 8001974:	f004 fda6 	bl	80064c4 <iprintf>
                printf((", Send EXITEC to Save and Exit<<<\n"));
 8001978:	485e      	ldr	r0, [pc, #376]	; (8001af4 <ecCalibration+0x4ac>)
 800197a:	f004 fe3f 	bl	80065fc <puts>
                if((_rawEC>0.9)&&(_rawEC<1.9)){
 800197e:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <ecCalibration+0x4b0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fde0 	bl	8000548 <__aeabi_f2d>
 8001988:	a34d      	add	r3, pc, #308	; (adr r3, 8001ac0 <ecCalibration+0x478>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7ff f8c3 	bl	8000b18 <__aeabi_dcmpgt>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d011      	beq.n	80019bc <ecCalibration+0x374>
 8001998:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <ecCalibration+0x4b0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdd3 	bl	8000548 <__aeabi_f2d>
 80019a2:	a349      	add	r3, pc, #292	; (adr r3, 8001ac8 <ecCalibration+0x480>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7ff f898 	bl	8000adc <__aeabi_dcmplt>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d004      	beq.n	80019bc <ecCalibration+0x374>
                    _kvalueLow =  KValueTemp;
 80019b2:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <ecCalibration+0x4a4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a51      	ldr	r2, [pc, #324]	; (8001afc <ecCalibration+0x4b4>)
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e01a      	b.n	80019f2 <ecCalibration+0x3aa>
                }else if((_rawEC>9)&&(_rawEC<16.8)){
 80019bc:	4b4e      	ldr	r3, [pc, #312]	; (8001af8 <ecCalibration+0x4b0>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	dd10      	ble.n	80019f2 <ecCalibration+0x3aa>
 80019d0:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <ecCalibration+0x4b0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdb7 	bl	8000548 <__aeabi_f2d>
 80019da:	a33d      	add	r3, pc, #244	; (adr r3, 8001ad0 <ecCalibration+0x488>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7ff f87c 	bl	8000adc <__aeabi_dcmplt>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <ecCalibration+0x3aa>
                    _kvalueHigh =  KValueTemp;
 80019ea:	4b40      	ldr	r3, [pc, #256]	; (8001aec <ecCalibration+0x4a4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a44      	ldr	r2, [pc, #272]	; (8001b00 <ecCalibration+0x4b8>)
 80019f0:	6013      	str	r3, [r2, #0]
                }
                ecCalibrationFinish = 1;
 80019f2:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <ecCalibration+0x494>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
                printf((">>>Failed,Try Again<<<\n"));
                printf("\n");
                ecCalibrationFinish = 0;
            }
        }
        break;
 80019f8:	e056      	b.n	8001aa8 <ecCalibration+0x460>
                printf("\n");
 80019fa:	200a      	movs	r0, #10
 80019fc:	f004 fd7a 	bl	80064f4 <putchar>
                printf((">>>Failed,Try Again<<<\n"));
 8001a00:	4840      	ldr	r0, [pc, #256]	; (8001b04 <ecCalibration+0x4bc>)
 8001a02:	f004 fdfb 	bl	80065fc <puts>
                printf("\n");
 8001a06:	200a      	movs	r0, #10
 8001a08:	f004 fd74 	bl	80064f4 <putchar>
                ecCalibrationFinish = 0;
 8001a0c:	4b33      	ldr	r3, [pc, #204]	; (8001adc <ecCalibration+0x494>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
        break;
 8001a12:	e049      	b.n	8001aa8 <ecCalibration+0x460>
        case 3:
        if(enterCalibrationFlag){
 8001a14:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <ecCalibration+0x4c0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d047      	beq.n	8001aac <ecCalibration+0x464>
            printf("\n");
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	f004 fd69 	bl	80064f4 <putchar>
                if(ecCalibrationFinish){
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <ecCalibration+0x494>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d02c      	beq.n	8001a84 <ecCalibration+0x43c>
                    if((_rawEC>0.9)&&(_rawEC<1.9)){
 8001a2a:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <ecCalibration+0x4b0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd8a 	bl	8000548 <__aeabi_f2d>
 8001a34:	a322      	add	r3, pc, #136	; (adr r3, 8001ac0 <ecCalibration+0x478>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7ff f86d 	bl	8000b18 <__aeabi_dcmpgt>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <ecCalibration+0x434>
 8001a44:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <ecCalibration+0x4b0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd7d 	bl	8000548 <__aeabi_f2d>
 8001a4e:	a31e      	add	r3, pc, #120	; (adr r3, 8001ac8 <ecCalibration+0x480>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7ff f842 	bl	8000adc <__aeabi_dcmplt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10e      	bne.n	8001a7c <ecCalibration+0x434>
                    	//KVALUEADDR=_kvalueLow;
                    }else if((_rawEC>9)&&(_rawEC<16.8)){
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <ecCalibration+0x4b0>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	dd04      	ble.n	8001a7c <ecCalibration+0x434>
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <ecCalibration+0x4b0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fd66 	bl	8000548 <__aeabi_f2d>
                        //KVALUEADDR+4 = _kvalueHigh;
                    }
                    printf((">>>Calibration Successful\n"));
 8001a7c:	4823      	ldr	r0, [pc, #140]	; (8001b0c <ecCalibration+0x4c4>)
 8001a7e:	f004 fdbd 	bl	80065fc <puts>
 8001a82:	e002      	b.n	8001a8a <ecCalibration+0x442>
                }else{
                    printf((">>>Calibration Failed\n"));
 8001a84:	4822      	ldr	r0, [pc, #136]	; (8001b10 <ecCalibration+0x4c8>)
 8001a86:	f004 fdb9 	bl	80065fc <puts>
                }
                printf((",Exit EC Calibration Mode<<<\n"));
 8001a8a:	4822      	ldr	r0, [pc, #136]	; (8001b14 <ecCalibration+0x4cc>)
 8001a8c:	f004 fdb6 	bl	80065fc <puts>
                printf("\n");
 8001a90:	200a      	movs	r0, #10
 8001a92:	f004 fd2f 	bl	80064f4 <putchar>
                ecCalibrationFinish  = 0;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <ecCalibration+0x494>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
                enterCalibrationFlag = 0;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <ecCalibration+0x4c0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
        }
        break;
 8001aa2:	e003      	b.n	8001aac <ecCalibration+0x464>
        break;
 8001aa4:	bf00      	nop
 8001aa6:	e002      	b.n	8001aae <ecCalibration+0x466>
        break;
 8001aa8:	bf00      	nop
 8001aaa:	e000      	b.n	8001aae <ecCalibration+0x466>
        break;
 8001aac:	bf00      	nop
    }
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	41040500 	.word	0x41040500
 8001ac0:	cccccccd 	.word	0xcccccccd
 8001ac4:	3feccccc 	.word	0x3feccccc
 8001ac8:	66666666 	.word	0x66666666
 8001acc:	3ffe6666 	.word	0x3ffe6666
 8001ad0:	cccccccd 	.word	0xcccccccd
 8001ad4:	4030cccc 	.word	0x4030cccc
 8001ad8:	08007620 	.word	0x08007620
 8001adc:	2000026c 	.word	0x2000026c
 8001ae0:	20000260 	.word	0x20000260
 8001ae4:	408f4000 	.word	0x408f4000
 8001ae8:	20000240 	.word	0x20000240
 8001aec:	2000025c 	.word	0x2000025c
 8001af0:	0800764c 	.word	0x0800764c
 8001af4:	08007660 	.word	0x08007660
 8001af8:	2000024c 	.word	0x2000024c
 8001afc:	20000018 	.word	0x20000018
 8001b00:	2000001c 	.word	0x2000001c
 8001b04:	08007684 	.word	0x08007684
 8001b08:	20000268 	.word	0x20000268
 8001b0c:	0800769c 	.word	0x0800769c
 8001b10:	080076b8 	.word	0x080076b8
 8001b14:	080076d0 	.word	0x080076d0

08001b18 <analizeCMD>:


void analizeCMD(float voltage, float temperature, char *message){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b22:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b26:	6078      	str	r0, [r7, #4]
	switch(message[0]){
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d020      	beq.n	8001b72 <analizeCMD+0x5a>
 8001b30:	2b03      	cmp	r3, #3
 8001b32:	dc2b      	bgt.n	8001b8c <analizeCMD+0x74>
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d002      	beq.n	8001b3e <analizeCMD+0x26>
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d00d      	beq.n	8001b58 <analizeCMD+0x40>
	case 3:
		modeIndex = 3;
		calibration( voltage,  temperature,  modeIndex);
		break;
	default:
		break;
 8001b3c:	e026      	b.n	8001b8c <analizeCMD+0x74>
		modeIndex = 1;
 8001b3e:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <analizeCMD+0x80>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
		calibration( voltage,  temperature,  modeIndex);
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <analizeCMD+0x80>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	edd7 0a02 	vldr	s1, [r7, #8]
 8001b4e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b52:	f7ff fd5b 	bl	800160c <calibration>
		break;
 8001b56:	e01a      	b.n	8001b8e <analizeCMD+0x76>
		modeIndex = 2;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <analizeCMD+0x80>)
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
		calibration( voltage,  temperature,  modeIndex);
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <analizeCMD+0x80>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	edd7 0a02 	vldr	s1, [r7, #8]
 8001b68:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b6c:	f7ff fd4e 	bl	800160c <calibration>
		break;
 8001b70:	e00d      	b.n	8001b8e <analizeCMD+0x76>
		modeIndex = 3;
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <analizeCMD+0x80>)
 8001b74:	2203      	movs	r2, #3
 8001b76:	601a      	str	r2, [r3, #0]
		calibration( voltage,  temperature,  modeIndex);
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <analizeCMD+0x80>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	edd7 0a02 	vldr	s1, [r7, #8]
 8001b82:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b86:	f7ff fd41 	bl	800160c <calibration>
		break;
 8001b8a:	e000      	b.n	8001b8e <analizeCMD+0x76>
		break;
 8001b8c:	bf00      	nop
	}

}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000264 	.word	0x20000264

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_MspInit+0x44>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_MspInit+0x44>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_MspInit+0x44>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_MspInit+0x44>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_MspInit+0x44>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_MspInit+0x44>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bde:	2007      	movs	r0, #7
 8001be0:	f001 fb0c 	bl	80031fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c10:	d13c      	bne.n	8001c8c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6153      	str	r3, [r2, #20]
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c34:	6153      	str	r3, [r2, #20]
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	6153      	str	r3, [r2, #20]
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_ADC_MspInit+0xa4>)
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = temperature_Pin;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(temperature_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <HAL_ADC_MspInit+0xa8>)
 8001c6e:	f001 fb07 	bl	8003280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c72:	2301      	movs	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c76:	2303      	movs	r3, #3
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c88:	f001 fafa 	bl	8003280 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3728      	adds	r7, #40	; 0x28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	48000800 	.word	0x48000800

08001c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <HAL_TIM_Base_MspInit+0x68>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d114      	bne.n	8001cd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_TIM_Base_MspInit+0x6c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_TIM_Base_MspInit+0x6c>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_TIM_Base_MspInit+0x6c>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	201d      	movs	r0, #29
 8001ccc:	f001 faa1 	bl	8003212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cd0:	201d      	movs	r0, #29
 8001cd2:	f001 faba 	bl	800324a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001cd6:	e010      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_TIM_Base_MspInit+0x70>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10b      	bne.n	8001cfa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_TIM_Base_MspInit+0x6c>)
 8001ce8:	f043 0310 	orr.w	r3, r3, #16
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_TIM_Base_MspInit+0x6c>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40001000 	.word	0x40001000

08001d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <HAL_UART_MspInit+0x7c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d128      	bne.n	8001d84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <HAL_UART_MspInit+0x80>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <HAL_UART_MspInit+0x80>)
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	61d3      	str	r3, [r2, #28]
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <HAL_UART_MspInit+0x80>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_UART_MspInit+0x80>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <HAL_UART_MspInit+0x80>)
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	6153      	str	r3, [r2, #20]
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_UART_MspInit+0x80>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d62:	230c      	movs	r3, #12
 8001d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d72:	2307      	movs	r3, #7
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d80:	f001 fa7e 	bl	8003280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40004400 	.word	0x40004400
 8001d90:	40021000 	.word	0x40021000

08001d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <NMI_Handler+0x4>

08001d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <MemManage_Handler+0x4>

08001da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <BusFault_Handler+0x4>

08001dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler+0x4>

08001db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de0:	f000 f932 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <TIM3_IRQHandler+0x10>)
 8001dee:	f003 fa0b 	bl	8005208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000100 	.word	0x20000100

08001dfc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00a      	b.n	8001e24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4601      	mov	r1, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf0      	blt.n	8001e0e <_read+0x12>
	}

return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e009      	b.n	8001e5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ffcf 	bl	8000df4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf1      	blt.n	8001e48 <_write+0x12>
	}
	return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_close>:

int _close(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	605a      	str	r2, [r3, #4]
	return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f004 faaa 	bl	8006460 <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20010000 	.word	0x20010000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	20000270 	.word	0x20000270
 8001f40:	20000288 	.word	0x20000288

08001f44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6e:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <LoopForever+0xe>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f84:	4c0b      	ldr	r4, [pc, #44]	; (8001fb4 <LoopForever+0x16>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f92:	f7ff ffd7 	bl	8001f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f004 fa69 	bl	800646c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f9a:	f7fe ff3d 	bl	8000e18 <main>

08001f9e <LoopForever>:

LoopForever:
    b LoopForever
 8001f9e:	e7fe      	b.n	8001f9e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fa0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001fac:	080077c8 	.word	0x080077c8
  ldr r2, =_sbss
 8001fb0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001fb4:	20000288 	.word	0x20000288

08001fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC1_2_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_Init+0x28>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_Init+0x28>)
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f001 f915 	bl	80031fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f808 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff fde6 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f001 f92d 	bl	8003266 <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f001 f8f5 	bl	8003212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000024 	.word	0x20000024
 8002040:	2000002c 	.word	0x2000002c
 8002044:	20000028 	.word	0x20000028

08002048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000002c 	.word	0x2000002c
 800206c:	20000274 	.word	0x20000274

08002070 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;  
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000274 	.word	0x20000274

08002088 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000002c 	.word	0x2000002c

080020d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b09a      	sub	sp, #104	; 0x68
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e1e3      	b.n	80024b8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d176      	bne.n	80021f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d152      	bne.n	80021b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fd63 	bl	8001bf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d13b      	bne.n	80021b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 ff29 	bl	8002f90 <ADC_Disable>
 800213e:	4603      	mov	r3, r0
 8002140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d12f      	bne.n	80021b0 <HAL_ADC_Init+0xe0>
 8002150:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002154:	2b00      	cmp	r3, #0
 8002156:	d12b      	bne.n	80021b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002160:	f023 0302 	bic.w	r3, r3, #2
 8002164:	f043 0202 	orr.w	r2, r3, #2
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800217a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800218a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800218c:	4b92      	ldr	r3, [pc, #584]	; (80023d8 <HAL_ADC_Init+0x308>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a92      	ldr	r2, [pc, #584]	; (80023dc <HAL_ADC_Init+0x30c>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9a      	lsrs	r2, r3, #18
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a2:	e002      	b.n	80021aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f9      	bne.n	80021a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021cc:	d110      	bne.n	80021f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f023 0312 	bic.w	r3, r3, #18
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 8150 	bne.w	800249e <HAL_ADC_Init+0x3ce>
 80021fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002202:	2b00      	cmp	r3, #0
 8002204:	f040 814b 	bne.w	800249e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 8143 	bne.w	800249e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002220:	f043 0202 	orr.w	r2, r3, #2
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002230:	d004      	beq.n	800223c <HAL_ADC_Init+0x16c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6a      	ldr	r2, [pc, #424]	; (80023e0 <HAL_ADC_Init+0x310>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_ADC_Init+0x170>
 800223c:	4b69      	ldr	r3, [pc, #420]	; (80023e4 <HAL_ADC_Init+0x314>)
 800223e:	e000      	b.n	8002242 <HAL_ADC_Init+0x172>
 8002240:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <HAL_ADC_Init+0x318>)
 8002242:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800224c:	d102      	bne.n	8002254 <HAL_ADC_Init+0x184>
 800224e:	4b64      	ldr	r3, [pc, #400]	; (80023e0 <HAL_ADC_Init+0x310>)
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	e01a      	b.n	800228a <HAL_ADC_Init+0x1ba>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a61      	ldr	r2, [pc, #388]	; (80023e0 <HAL_ADC_Init+0x310>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d103      	bne.n	8002266 <HAL_ADC_Init+0x196>
 800225e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e011      	b.n	800228a <HAL_ADC_Init+0x1ba>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a60      	ldr	r2, [pc, #384]	; (80023ec <HAL_ADC_Init+0x31c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d102      	bne.n	8002276 <HAL_ADC_Init+0x1a6>
 8002270:	4b5f      	ldr	r3, [pc, #380]	; (80023f0 <HAL_ADC_Init+0x320>)
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e009      	b.n	800228a <HAL_ADC_Init+0x1ba>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a5d      	ldr	r2, [pc, #372]	; (80023f0 <HAL_ADC_Init+0x320>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_ADC_Init+0x1b6>
 8002280:	4b5a      	ldr	r3, [pc, #360]	; (80023ec <HAL_ADC_Init+0x31c>)
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	e001      	b.n	800228a <HAL_ADC_Init+0x1ba>
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d108      	bne.n	80022aa <HAL_ADC_Init+0x1da>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x1da>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_ADC_Init+0x1dc>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11c      	bne.n	80022ea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022b0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_Init+0x202>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_ADC_Init+0x202>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_ADC_Init+0x204>
 80022d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d108      	bne.n	80022ea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80022d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7e5b      	ldrb	r3, [r3, #25]
 80022ee:	035b      	lsls	r3, r3, #13
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f4:	2a01      	cmp	r2, #1
 80022f6:	d002      	beq.n	80022fe <HAL_ADC_Init+0x22e>
 80022f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022fc:	e000      	b.n	8002300 <HAL_ADC_Init+0x230>
 80022fe:	2200      	movs	r2, #0
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4313      	orrs	r3, r2
 800230e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002310:	4313      	orrs	r3, r2
 8002312:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d11b      	bne.n	8002356 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	7e5b      	ldrb	r3, [r3, #25]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	3b01      	subs	r3, #1
 800232c:	045a      	lsls	r2, r3, #17
 800232e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002330:	4313      	orrs	r3, r2
 8002332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002336:	663b      	str	r3, [r7, #96]	; 0x60
 8002338:	e00d      	b.n	8002356 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	2b01      	cmp	r3, #1
 800235c:	d054      	beq.n	8002408 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a22      	ldr	r2, [pc, #136]	; (80023ec <HAL_ADC_Init+0x31c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_ADC_Init+0x2a2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_ADC_Init+0x320>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d140      	bne.n	80023f4 <HAL_ADC_Init+0x324>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800237a:	d02a      	beq.n	80023d2 <HAL_ADC_Init+0x302>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002384:	d022      	beq.n	80023cc <HAL_ADC_Init+0x2fc>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800238e:	d01a      	beq.n	80023c6 <HAL_ADC_Init+0x2f6>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002398:	d012      	beq.n	80023c0 <HAL_ADC_Init+0x2f0>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80023a2:	d00a      	beq.n	80023ba <HAL_ADC_Init+0x2ea>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80023ac:	d002      	beq.n	80023b4 <HAL_ADC_Init+0x2e4>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	e023      	b.n	80023fc <HAL_ADC_Init+0x32c>
 80023b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80023b8:	e020      	b.n	80023fc <HAL_ADC_Init+0x32c>
 80023ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023be:	e01d      	b.n	80023fc <HAL_ADC_Init+0x32c>
 80023c0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80023c4:	e01a      	b.n	80023fc <HAL_ADC_Init+0x32c>
 80023c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ca:	e017      	b.n	80023fc <HAL_ADC_Init+0x32c>
 80023cc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80023d0:	e014      	b.n	80023fc <HAL_ADC_Init+0x32c>
 80023d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023d6:	e011      	b.n	80023fc <HAL_ADC_Init+0x32c>
 80023d8:	20000024 	.word	0x20000024
 80023dc:	431bde83 	.word	0x431bde83
 80023e0:	50000100 	.word	0x50000100
 80023e4:	50000300 	.word	0x50000300
 80023e8:	50000700 	.word	0x50000700
 80023ec:	50000400 	.word	0x50000400
 80023f0:	50000500 	.word	0x50000500
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002400:	4313      	orrs	r3, r2
 8002402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002404:	4313      	orrs	r3, r2
 8002406:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d114      	bne.n	8002440 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002424:	f023 0302 	bic.w	r3, r3, #2
 8002428:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7e1b      	ldrb	r3, [r3, #24]
 800242e:	039a      	lsls	r2, r3, #14
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4313      	orrs	r3, r2
 800243a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800243c:	4313      	orrs	r3, r2
 800243e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <HAL_ADC_Init+0x3f0>)
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002450:	430b      	orrs	r3, r1
 8002452:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10c      	bne.n	8002476 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f023 010f 	bic.w	r1, r3, #15
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
 8002474:	e007      	b.n	8002486 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 020f 	bic.w	r2, r2, #15
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f023 0303 	bic.w	r3, r3, #3
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
 800249c:	e00a      	b.n	80024b4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f023 0312 	bic.w	r3, r3, #18
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80024b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3768      	adds	r7, #104	; 0x68
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	fff0c007 	.word	0xfff0c007

080024c4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 80f9 	bne.w	80026d2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_Start+0x2a>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e0f4      	b.n	80026d8 <HAL_ADC_Start+0x214>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fce6 	bl	8002ec8 <ADC_Enable>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f040 80e0 	bne.w	80026c8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002524:	d004      	beq.n	8002530 <HAL_ADC_Start+0x6c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6d      	ldr	r2, [pc, #436]	; (80026e0 <HAL_ADC_Start+0x21c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d106      	bne.n	800253e <HAL_ADC_Start+0x7a>
 8002530:	4b6c      	ldr	r3, [pc, #432]	; (80026e4 <HAL_ADC_Start+0x220>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_ADC_Start+0x9a>
 800253c:	e005      	b.n	800254a <HAL_ADC_Start+0x86>
 800253e:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_ADC_Start+0x224>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_ADC_Start+0x9a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002552:	d004      	beq.n	800255e <HAL_ADC_Start+0x9a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a64      	ldr	r2, [pc, #400]	; (80026ec <HAL_ADC_Start+0x228>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d115      	bne.n	800258a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d036      	beq.n	80025e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002580:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002588:	e02d      	b.n	80025e6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800259e:	d004      	beq.n	80025aa <HAL_ADC_Start+0xe6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a4e      	ldr	r2, [pc, #312]	; (80026e0 <HAL_ADC_Start+0x21c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10a      	bne.n	80025c0 <HAL_ADC_Start+0xfc>
 80025aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e008      	b.n	80025d2 <HAL_ADC_Start+0x10e>
 80025c0:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_ADC_Start+0x228>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f2:	d106      	bne.n	8002602 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	f023 0206 	bic.w	r2, r3, #6
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
 8002600:	e002      	b.n	8002608 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	221c      	movs	r2, #28
 8002616:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002620:	d004      	beq.n	800262c <HAL_ADC_Start+0x168>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <HAL_ADC_Start+0x21c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d106      	bne.n	800263a <HAL_ADC_Start+0x176>
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_ADC_Start+0x220>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	2b00      	cmp	r3, #0
 8002636:	d03e      	beq.n	80026b6 <HAL_ADC_Start+0x1f2>
 8002638:	e005      	b.n	8002646 <HAL_ADC_Start+0x182>
 800263a:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_ADC_Start+0x224>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2b00      	cmp	r3, #0
 8002644:	d037      	beq.n	80026b6 <HAL_ADC_Start+0x1f2>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800264e:	d004      	beq.n	800265a <HAL_ADC_Start+0x196>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_ADC_Start+0x21c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d106      	bne.n	8002668 <HAL_ADC_Start+0x1a4>
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_ADC_Start+0x220>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2b05      	cmp	r3, #5
 8002664:	d027      	beq.n	80026b6 <HAL_ADC_Start+0x1f2>
 8002666:	e005      	b.n	8002674 <HAL_ADC_Start+0x1b0>
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <HAL_ADC_Start+0x224>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2b05      	cmp	r3, #5
 8002672:	d020      	beq.n	80026b6 <HAL_ADC_Start+0x1f2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800267c:	d004      	beq.n	8002688 <HAL_ADC_Start+0x1c4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <HAL_ADC_Start+0x21c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d106      	bne.n	8002696 <HAL_ADC_Start+0x1d2>
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_ADC_Start+0x220>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b09      	cmp	r3, #9
 8002692:	d010      	beq.n	80026b6 <HAL_ADC_Start+0x1f2>
 8002694:	e005      	b.n	80026a2 <HAL_ADC_Start+0x1de>
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_ADC_Start+0x224>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d009      	beq.n	80026b6 <HAL_ADC_Start+0x1f2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026aa:	d004      	beq.n	80026b6 <HAL_ADC_Start+0x1f2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <HAL_ADC_Start+0x228>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10f      	bne.n	80026d6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0204 	orr.w	r2, r2, #4
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	e006      	b.n	80026d6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026d0:	e001      	b.n	80026d6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026d2:	2302      	movs	r3, #2
 80026d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	50000100 	.word	0x50000100
 80026e4:	50000300 	.word	0x50000300
 80026e8:	50000700 	.word	0x50000700
 80026ec:	50000400 	.word	0x50000400

080026f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800270c:	b480      	push	{r7}
 800270e:	b09b      	sub	sp, #108	; 0x6c
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x22>
 800272a:	2302      	movs	r3, #2
 800272c:	e2ca      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x5b8>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 82ae 	bne.w	8002ca2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d81c      	bhi.n	8002788 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	461a      	mov	r2, r3
 8002762:	231f      	movs	r3, #31
 8002764:	4093      	lsls	r3, r2
 8002766:	43db      	mvns	r3, r3
 8002768:	4019      	ands	r1, r3
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa00 f203 	lsl.w	r2, r0, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
 8002786:	e063      	b.n	8002850 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d81e      	bhi.n	80027ce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	3b1e      	subs	r3, #30
 80027a4:	221f      	movs	r2, #31
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	4019      	ands	r1, r3
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	3b1e      	subs	r3, #30
 80027c0:	fa00 f203 	lsl.w	r2, r0, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34
 80027cc:	e040      	b.n	8002850 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b0e      	cmp	r3, #14
 80027d4:	d81e      	bhi.n	8002814 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	3b3c      	subs	r3, #60	; 0x3c
 80027ea:	221f      	movs	r2, #31
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4019      	ands	r1, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	3b3c      	subs	r3, #60	; 0x3c
 8002806:	fa00 f203 	lsl.w	r2, r0, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
 8002812:	e01d      	b.n	8002850 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	3b5a      	subs	r3, #90	; 0x5a
 8002828:	221f      	movs	r2, #31
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	4019      	ands	r1, r3
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	3b5a      	subs	r3, #90	; 0x5a
 8002844:	fa00 f203 	lsl.w	r2, r0, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 80e5 	bne.w	8002a2a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b09      	cmp	r3, #9
 8002866:	d91c      	bls.n	80028a2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6999      	ldr	r1, [r3, #24]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	3b1e      	subs	r3, #30
 800287a:	2207      	movs	r2, #7
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	4019      	ands	r1, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6898      	ldr	r0, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	3b1e      	subs	r3, #30
 8002894:	fa00 f203 	lsl.w	r2, r0, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	619a      	str	r2, [r3, #24]
 80028a0:	e019      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6959      	ldr	r1, [r3, #20]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	2207      	movs	r2, #7
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4019      	ands	r1, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6898      	ldr	r0, [r3, #8]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	fa00 f203 	lsl.w	r2, r0, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d84f      	bhi.n	8002998 <HAL_ADC_ConfigChannel+0x28c>
 80028f8:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <HAL_ADC_ConfigChannel+0x1f4>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002911 	.word	0x08002911
 8002904:	08002933 	.word	0x08002933
 8002908:	08002955 	.word	0x08002955
 800290c:	08002977 	.word	0x08002977
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002916:	4b9a      	ldr	r3, [pc, #616]	; (8002b80 <HAL_ADC_ConfigChannel+0x474>)
 8002918:	4013      	ands	r3, r2
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	0691      	lsls	r1, r2, #26
 8002920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002922:	430a      	orrs	r2, r1
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800292e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002930:	e07e      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002938:	4b91      	ldr	r3, [pc, #580]	; (8002b80 <HAL_ADC_ConfigChannel+0x474>)
 800293a:	4013      	ands	r3, r2
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	0691      	lsls	r1, r2, #26
 8002942:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002944:	430a      	orrs	r2, r1
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002950:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002952:	e06d      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800295a:	4b89      	ldr	r3, [pc, #548]	; (8002b80 <HAL_ADC_ConfigChannel+0x474>)
 800295c:	4013      	ands	r3, r2
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	0691      	lsls	r1, r2, #26
 8002964:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002966:	430a      	orrs	r2, r1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002972:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002974:	e05c      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800297c:	4b80      	ldr	r3, [pc, #512]	; (8002b80 <HAL_ADC_ConfigChannel+0x474>)
 800297e:	4013      	ands	r3, r2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	0691      	lsls	r1, r2, #26
 8002986:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002988:	430a      	orrs	r2, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002994:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002996:	e04b      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	069b      	lsls	r3, r3, #26
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029ba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	069b      	lsls	r3, r3, #26
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d107      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029de:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	069b      	lsls	r3, r3, #26
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a02:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	069b      	lsls	r3, r3, #26
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d10a      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a26:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002a28:	e001      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002a2e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d108      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x344>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x344>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x346>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 8130 	bne.w	8002cb8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d00f      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	400a      	ands	r2, r1
 8002a7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a7e:	e049      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d91c      	bls.n	8002adc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6999      	ldr	r1, [r3, #24]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b1b      	subs	r3, #27
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	4019      	ands	r1, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6898      	ldr	r0, [r3, #8]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	3b1b      	subs	r3, #27
 8002ace:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	619a      	str	r2, [r3, #24]
 8002ada:	e01b      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6959      	ldr	r1, [r3, #20]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	2207      	movs	r2, #7
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	4019      	ands	r1, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6898      	ldr	r0, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x41c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <HAL_ADC_ConfigChannel+0x478>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x420>
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_ADC_ConfigChannel+0x47c>)
 8002b2a:	e000      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x422>
 8002b2c:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_ADC_ConfigChannel+0x480>)
 8002b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d105      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d015      	beq.n	8002b70 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b48:	2b11      	cmp	r3, #17
 8002b4a:	d105      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b5c:	2b12      	cmp	r3, #18
 8002b5e:	f040 80ab 	bne.w	8002cb8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 80a4 	bne.w	8002cb8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b78:	d10a      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x484>
 8002b7a:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <HAL_ADC_ConfigChannel+0x478>)
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	e022      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x4ba>
 8002b80:	83fff000 	.word	0x83fff000
 8002b84:	50000100 	.word	0x50000100
 8002b88:	50000300 	.word	0x50000300
 8002b8c:	50000700 	.word	0x50000700
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a4e      	ldr	r2, [pc, #312]	; (8002cd0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d103      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x496>
 8002b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	e011      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x4ba>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d102      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x4a6>
 8002bac:	4b4a      	ldr	r3, [pc, #296]	; (8002cd8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e009      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x4ba>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d102      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x4b6>
 8002bbc:	4b45      	ldr	r3, [pc, #276]	; (8002cd4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e001      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x4ba>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d108      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x4da>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x4da>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x4dc>
 8002be6:	2300      	movs	r3, #0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d150      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x502>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x502>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x504>
 8002c0e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d13c      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d11d      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x54c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c24:	d118      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c30:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_ADC_ConfigChannel+0x5d0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <HAL_ADC_ConfigChannel+0x5d4>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	0c9a      	lsrs	r2, r3, #18
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c48:	e002      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f9      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c56:	e02e      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b11      	cmp	r3, #17
 8002c5e:	d10b      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x56c>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c68:	d106      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c74:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c76:	e01e      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b12      	cmp	r3, #18
 8002c7e:	d11a      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c8c:	e013      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ca0:	e00a      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002cb4:	e000      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cb6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002cc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	376c      	adds	r7, #108	; 0x6c
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	50000100 	.word	0x50000100
 8002cd4:	50000400 	.word	0x50000400
 8002cd8:	50000500 	.word	0x50000500
 8002cdc:	20000024 	.word	0x20000024
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b099      	sub	sp, #100	; 0x64
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfc:	d102      	bne.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	e01a      	b.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6a      	ldr	r2, [pc, #424]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d103      	bne.n	8002d16 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002d0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	e011      	b.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a67      	ldr	r2, [pc, #412]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d102      	bne.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d20:	4b66      	ldr	r3, [pc, #408]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	e009      	b.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a64      	ldr	r2, [pc, #400]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d102      	bne.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d30:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	e001      	b.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b0      	b.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e0a9      	b.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 808d 	bne.w	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8086 	bne.w	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d80:	d004      	beq.n	8002d8c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a4b      	ldr	r2, [pc, #300]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002d8e:	e000      	b.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002d92:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d040      	beq.n	8002e1e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dae:	035b      	lsls	r3, r3, #13
 8002db0:	430b      	orrs	r3, r1
 8002db2:	431a      	orrs	r2, r3
 8002db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d108      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d15c      	bne.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002dfa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d14b      	bne.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e08:	f023 030f 	bic.w	r3, r3, #15
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	6811      	ldr	r1, [r2, #0]
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	6892      	ldr	r2, [r2, #8]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e1a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e1c:	e03c      	b.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e28:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d108      	bne.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d123      	bne.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002e6c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d112      	bne.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e7a:	f023 030f 	bic.w	r3, r3, #15
 8002e7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e80:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e82:	e009      	b.n	8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e96:	e000      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e98:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3764      	adds	r7, #100	; 0x64
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	50000100 	.word	0x50000100
 8002eb8:	50000400 	.word	0x50000400
 8002ebc:	50000500 	.word	0x50000500
 8002ec0:	50000300 	.word	0x50000300
 8002ec4:	50000700 	.word	0x50000700

08002ec8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d108      	bne.n	8002ef4 <ADC_Enable+0x2c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <ADC_Enable+0x2c>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <ADC_Enable+0x2e>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d143      	bne.n	8002f82 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <ADC_Enable+0xc4>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0210 	orr.w	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e02f      	b.n	8002f84 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002f34:	f7ff f89c 	bl	8002070 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f3a:	e01b      	b.n	8002f74 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f3c:	f7ff f898 	bl	8002070 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d914      	bls.n	8002f74 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d00d      	beq.n	8002f74 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0210 	orr.w	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d1dc      	bne.n	8002f3c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	8000003f 	.word	0x8000003f

08002f90 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <ADC_Disable+0x2c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <ADC_Disable+0x2c>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <ADC_Disable+0x2e>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d047      	beq.n	8003052 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030d 	and.w	r3, r3, #13
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d10f      	bne.n	8002ff0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0202 	orr.w	r2, r2, #2
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002fe8:	f7ff f842 	bl	8002070 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fee:	e029      	b.n	8003044 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e023      	b.n	8003054 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800300c:	f7ff f830 	bl	8002070 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d914      	bls.n	8003044 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10d      	bne.n	8003044 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0210 	orr.w	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e007      	b.n	8003054 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d0dc      	beq.n	800300c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003078:	4013      	ands	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308e:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60d3      	str	r3, [r2, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <__NVIC_GetPriorityGrouping+0x18>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 0307 	and.w	r3, r3, #7
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	db0b      	blt.n	80030ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	4907      	ldr	r1, [pc, #28]	; (80030f8 <__NVIC_EnableIRQ+0x38>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2001      	movs	r0, #1
 80030e2:	fa00 f202 	lsl.w	r2, r0, r2
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e000e100 	.word	0xe000e100

080030fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db0a      	blt.n	8003126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	490c      	ldr	r1, [pc, #48]	; (8003148 <__NVIC_SetPriority+0x4c>)
 8003116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311a:	0112      	lsls	r2, r2, #4
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	440b      	add	r3, r1
 8003120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003124:	e00a      	b.n	800313c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4908      	ldr	r1, [pc, #32]	; (800314c <__NVIC_SetPriority+0x50>)
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	3b04      	subs	r3, #4
 8003134:	0112      	lsls	r2, r2, #4
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	440b      	add	r3, r1
 800313a:	761a      	strb	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000e100 	.word	0xe000e100
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f1c3 0307 	rsb	r3, r3, #7
 800316a:	2b04      	cmp	r3, #4
 800316c:	bf28      	it	cs
 800316e:	2304      	movcs	r3, #4
 8003170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3304      	adds	r3, #4
 8003176:	2b06      	cmp	r3, #6
 8003178:	d902      	bls.n	8003180 <NVIC_EncodePriority+0x30>
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3b03      	subs	r3, #3
 800317e:	e000      	b.n	8003182 <NVIC_EncodePriority+0x32>
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	f04f 32ff 	mov.w	r2, #4294967295
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	401a      	ands	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003198:	f04f 31ff 	mov.w	r1, #4294967295
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	43d9      	mvns	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	4313      	orrs	r3, r2
         );
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	; 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c8:	d301      	bcc.n	80031ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00f      	b.n	80031ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <SysTick_Config+0x40>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d6:	210f      	movs	r1, #15
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	f7ff ff8e 	bl	80030fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <SysTick_Config+0x40>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <SysTick_Config+0x40>)
 80031e8:	2207      	movs	r2, #7
 80031ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	e000e010 	.word	0xe000e010

080031fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff29 	bl	800305c <__NVIC_SetPriorityGrouping>
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003224:	f7ff ff3e 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8003228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	6978      	ldr	r0, [r7, #20]
 8003230:	f7ff ff8e 	bl	8003150 <NVIC_EncodePriority>
 8003234:	4602      	mov	r2, r0
 8003236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff5d 	bl	80030fc <__NVIC_SetPriority>
}
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	4603      	mov	r3, r0
 8003252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff31 	bl	80030c0 <__NVIC_EnableIRQ>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ffa2 	bl	80031b8 <SysTick_Config>
 8003274:	4603      	mov	r3, r0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800328e:	e160      	b.n	8003552 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8152 	beq.w	800354c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d005      	beq.n	80032c0 <HAL_GPIO_Init+0x40>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d130      	bne.n	8003322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	2203      	movs	r2, #3
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f6:	2201      	movs	r2, #1
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f003 0201 	and.w	r2, r3, #1
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b03      	cmp	r3, #3
 800332c:	d017      	beq.n	800335e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	2203      	movs	r2, #3
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d123      	bne.n	80033b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	08da      	lsrs	r2, r3, #3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3208      	adds	r2, #8
 8003372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	220f      	movs	r2, #15
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	08da      	lsrs	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3208      	adds	r2, #8
 80033ac:	6939      	ldr	r1, [r7, #16]
 80033ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0203 	and.w	r2, r3, #3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80ac 	beq.w	800354c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f4:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <HAL_GPIO_Init+0x2f0>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4a5d      	ldr	r2, [pc, #372]	; (8003570 <HAL_GPIO_Init+0x2f0>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6193      	str	r3, [r2, #24]
 8003400:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <HAL_GPIO_Init+0x2f0>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800340c:	4a59      	ldr	r2, [pc, #356]	; (8003574 <HAL_GPIO_Init+0x2f4>)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	089b      	lsrs	r3, r3, #2
 8003412:	3302      	adds	r3, #2
 8003414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	220f      	movs	r2, #15
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003436:	d025      	beq.n	8003484 <HAL_GPIO_Init+0x204>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a4f      	ldr	r2, [pc, #316]	; (8003578 <HAL_GPIO_Init+0x2f8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d01f      	beq.n	8003480 <HAL_GPIO_Init+0x200>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a4e      	ldr	r2, [pc, #312]	; (800357c <HAL_GPIO_Init+0x2fc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d019      	beq.n	800347c <HAL_GPIO_Init+0x1fc>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a4d      	ldr	r2, [pc, #308]	; (8003580 <HAL_GPIO_Init+0x300>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d013      	beq.n	8003478 <HAL_GPIO_Init+0x1f8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a4c      	ldr	r2, [pc, #304]	; (8003584 <HAL_GPIO_Init+0x304>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00d      	beq.n	8003474 <HAL_GPIO_Init+0x1f4>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a4b      	ldr	r2, [pc, #300]	; (8003588 <HAL_GPIO_Init+0x308>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d007      	beq.n	8003470 <HAL_GPIO_Init+0x1f0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a4a      	ldr	r2, [pc, #296]	; (800358c <HAL_GPIO_Init+0x30c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_GPIO_Init+0x1ec>
 8003468:	2306      	movs	r3, #6
 800346a:	e00c      	b.n	8003486 <HAL_GPIO_Init+0x206>
 800346c:	2307      	movs	r3, #7
 800346e:	e00a      	b.n	8003486 <HAL_GPIO_Init+0x206>
 8003470:	2305      	movs	r3, #5
 8003472:	e008      	b.n	8003486 <HAL_GPIO_Init+0x206>
 8003474:	2304      	movs	r3, #4
 8003476:	e006      	b.n	8003486 <HAL_GPIO_Init+0x206>
 8003478:	2303      	movs	r3, #3
 800347a:	e004      	b.n	8003486 <HAL_GPIO_Init+0x206>
 800347c:	2302      	movs	r3, #2
 800347e:	e002      	b.n	8003486 <HAL_GPIO_Init+0x206>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_GPIO_Init+0x206>
 8003484:	2300      	movs	r3, #0
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	f002 0203 	and.w	r2, r2, #3
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4093      	lsls	r3, r2
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003496:	4937      	ldr	r1, [pc, #220]	; (8003574 <HAL_GPIO_Init+0x2f4>)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a4:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_GPIO_Init+0x310>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034c8:	4a31      	ldr	r2, [pc, #196]	; (8003590 <HAL_GPIO_Init+0x310>)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034ce:	4b30      	ldr	r3, [pc, #192]	; (8003590 <HAL_GPIO_Init+0x310>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034f2:	4a27      	ldr	r2, [pc, #156]	; (8003590 <HAL_GPIO_Init+0x310>)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_GPIO_Init+0x310>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800351c:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <HAL_GPIO_Init+0x310>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003522:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_GPIO_Init+0x310>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <HAL_GPIO_Init+0x310>)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3301      	adds	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f47f ae97 	bne.w	8003290 <HAL_GPIO_Init+0x10>
  }
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40021000 	.word	0x40021000
 8003574:	40010000 	.word	0x40010000
 8003578:	48000400 	.word	0x48000400
 800357c:	48000800 	.word	0x48000800
 8003580:	48000c00 	.word	0x48000c00
 8003584:	48001000 	.word	0x48001000
 8003588:	48001400 	.word	0x48001400
 800358c:	48001800 	.word	0x48001800
 8003590:	40010400 	.word	0x40010400

08003594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4013      	ands	r3, r2
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43d9      	mvns	r1, r3
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	400b      	ands	r3, r1
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	619a      	str	r2, [r3, #24]
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fd ffc6 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40010400 	.word	0x40010400

08003658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800365e:	af00      	add	r7, sp, #0
 8003660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003664:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003668:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800366a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	f001 b83a 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003682:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 816f 	beq.w	8003972 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003694:	4bb5      	ldr	r3, [pc, #724]	; (800396c <HAL_RCC_OscConfig+0x314>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b04      	cmp	r3, #4
 800369e:	d00c      	beq.n	80036ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a0:	4bb2      	ldr	r3, [pc, #712]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 030c 	and.w	r3, r3, #12
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d15c      	bne.n	8003766 <HAL_RCC_OscConfig+0x10e>
 80036ac:	4baf      	ldr	r3, [pc, #700]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80036b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b8:	d155      	bne.n	8003766 <HAL_RCC_OscConfig+0x10e>
 80036ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_OscConfig+0x94>
 80036e6:	4ba1      	ldr	r3, [pc, #644]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	e015      	b.n	8003718 <HAL_RCC_OscConfig+0xc0>
 80036ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80036f8:	fa93 f3a3 	rbit	r3, r3
 80036fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003704:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003708:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003714:	4b95      	ldr	r3, [pc, #596]	; (800396c <HAL_RCC_OscConfig+0x314>)
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800371c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003720:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003724:	fa92 f2a2 	rbit	r2, r2
 8003728:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800372c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003730:	fab2 f282 	clz	r2, r2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8111 	beq.w	8003970 <HAL_RCC_OscConfig+0x318>
 800374e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003752:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 8108 	bne.w	8003970 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f000 bfc6 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x12e>
 8003778:	4b7c      	ldr	r3, [pc, #496]	; (800396c <HAL_RCC_OscConfig+0x314>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a7b      	ldr	r2, [pc, #492]	; (800396c <HAL_RCC_OscConfig+0x314>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e036      	b.n	80037f4 <HAL_RCC_OscConfig+0x19c>
 8003786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x158>
 8003796:	4b75      	ldr	r3, [pc, #468]	; (800396c <HAL_RCC_OscConfig+0x314>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a74      	ldr	r2, [pc, #464]	; (800396c <HAL_RCC_OscConfig+0x314>)
 800379c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	4b72      	ldr	r3, [pc, #456]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a71      	ldr	r2, [pc, #452]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e021      	b.n	80037f4 <HAL_RCC_OscConfig+0x19c>
 80037b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037c0:	d10c      	bne.n	80037dc <HAL_RCC_OscConfig+0x184>
 80037c2:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a69      	ldr	r2, [pc, #420]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4b67      	ldr	r3, [pc, #412]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a66      	ldr	r2, [pc, #408]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e00b      	b.n	80037f4 <HAL_RCC_OscConfig+0x19c>
 80037dc:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a62      	ldr	r2, [pc, #392]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b60      	ldr	r3, [pc, #384]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5f      	ldr	r2, [pc, #380]	; (800396c <HAL_RCC_OscConfig+0x314>)
 80037ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037f2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d059      	beq.n	80038b8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fe fc34 	bl	8002070 <HAL_GetTick>
 8003808:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800380e:	f7fe fc2f 	bl	8002070 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d902      	bls.n	8003824 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	f000 bf67 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>
 8003824:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003828:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003838:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	d102      	bne.n	8003856 <HAL_RCC_OscConfig+0x1fe>
 8003850:	4b46      	ldr	r3, [pc, #280]	; (800396c <HAL_RCC_OscConfig+0x314>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x22a>
 8003856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800385a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800386a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003872:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800387e:	4b3b      	ldr	r3, [pc, #236]	; (800396c <HAL_RCC_OscConfig+0x314>)
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003886:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800388a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800388e:	fa92 f2a2 	rbit	r2, r2
 8003892:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003896:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800389a:	fab2 f282 	clz	r2, r2
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	f042 0220 	orr.w	r2, r2, #32
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	f002 021f 	and.w	r2, r2, #31
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0ab      	beq.n	800380e <HAL_RCC_OscConfig+0x1b6>
 80038b6:	e05c      	b.n	8003972 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fe fbda 	bl	8002070 <HAL_GetTick>
 80038bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c2:	f7fe fbd5 	bl	8002070 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d902      	bls.n	80038d8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	f000 bf0d 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>
 80038d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80038e4:	fa93 f3a3 	rbit	r3, r3
 80038e8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80038ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d102      	bne.n	800390a <HAL_RCC_OscConfig+0x2b2>
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCC_OscConfig+0x314>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	e015      	b.n	8003936 <HAL_RCC_OscConfig+0x2de>
 800390a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800390e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800391e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003922:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003926:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_RCC_OscConfig+0x314>)
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800393a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800393e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003942:	fa92 f2a2 	rbit	r2, r2
 8003946:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800394a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800394e:	fab2 f282 	clz	r2, r2
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f042 0220 	orr.w	r2, r2, #32
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	f002 021f 	and.w	r2, r2, #31
 800395e:	2101      	movs	r1, #1
 8003960:	fa01 f202 	lsl.w	r2, r1, r2
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ab      	bne.n	80038c2 <HAL_RCC_OscConfig+0x26a>
 800396a:	e002      	b.n	8003972 <HAL_RCC_OscConfig+0x31a>
 800396c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003976:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 817f 	beq.w	8003c86 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003988:	4ba7      	ldr	r3, [pc, #668]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00c      	beq.n	80039ae <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003994:	4ba4      	ldr	r3, [pc, #656]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d173      	bne.n	8003a88 <HAL_RCC_OscConfig+0x430>
 80039a0:	4ba1      	ldr	r3, [pc, #644]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80039a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ac:	d16c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x430>
 80039ae:	2302      	movs	r3, #2
 80039b0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80039b8:	fa93 f3a3 	rbit	r3, r3
 80039bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80039c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_RCC_OscConfig+0x386>
 80039d8:	4b93      	ldr	r3, [pc, #588]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	e013      	b.n	8003a06 <HAL_RCC_OscConfig+0x3ae>
 80039de:	2302      	movs	r3, #2
 80039e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80039f0:	2302      	movs	r3, #2
 80039f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80039f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003a02:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2202      	movs	r2, #2
 8003a08:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003a0c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003a10:	fa92 f2a2 	rbit	r2, r2
 8003a14:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003a18:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003a1c:	fab2 f282 	clz	r2, r2
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f042 0220 	orr.w	r2, r2, #32
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	f002 021f 	and.w	r2, r2, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <HAL_RCC_OscConfig+0x3f6>
 8003a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d002      	beq.n	8003a4e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f000 be52 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4e:	4b76      	ldr	r3, [pc, #472]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	21f8      	movs	r1, #248	; 0xf8
 8003a64:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003a6c:	fa91 f1a1 	rbit	r1, r1
 8003a70:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003a74:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a78:	fab1 f181 	clz	r1, r1
 8003a7c:	b2c9      	uxtb	r1, r1
 8003a7e:	408b      	lsls	r3, r1
 8003a80:	4969      	ldr	r1, [pc, #420]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	e0fe      	b.n	8003c86 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8088 	beq.w	8003baa <HAL_RCC_OscConfig+0x552>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003aac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab0:	fab3 f383 	clz	r3, r3
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003aba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fad3 	bl	8002070 <HAL_GetTick>
 8003aca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fe face 	bl	8002070 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d902      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f000 be06 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003af8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	fab3 f383 	clz	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d102      	bne.n	8003b16 <HAL_RCC_OscConfig+0x4be>
 8003b10:	4b45      	ldr	r3, [pc, #276]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	e013      	b.n	8003b3e <HAL_RCC_OscConfig+0x4e6>
 8003b16:	2302      	movs	r3, #2
 8003b18:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003b2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003b44:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003b48:	fa92 f2a2 	rbit	r2, r2
 8003b4c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003b50:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003b54:	fab2 f282 	clz	r2, r2
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	f042 0220 	orr.w	r2, r2, #32
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f002 021f 	and.w	r2, r2, #31
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0af      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	21f8      	movs	r1, #248	; 0xf8
 8003b86:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003b8e:	fa91 f1a1 	rbit	r1, r1
 8003b92:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003b96:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b9a:	fab1 f181 	clz	r1, r1
 8003b9e:	b2c9      	uxtb	r1, r1
 8003ba0:	408b      	lsls	r3, r1
 8003ba2:	4921      	ldr	r1, [pc, #132]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
 8003ba8:	e06d      	b.n	8003c86 <HAL_RCC_OscConfig+0x62e>
 8003baa:	2301      	movs	r3, #1
 8003bac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003bbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe fa4b 	bl	8002070 <HAL_GetTick>
 8003bda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be0:	f7fe fa46 	bl	8002070 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d902      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	f000 bd7e 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003c08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5d4>
 8003c20:	4b01      	ldr	r3, [pc, #4]	; (8003c28 <HAL_RCC_OscConfig+0x5d0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	e016      	b.n	8003c54 <HAL_RCC_OscConfig+0x5fc>
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c36:	fa93 f3a3 	rbit	r3, r3
 8003c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c3e:	2302      	movs	r3, #2
 8003c40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003c44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003c50:	4bbf      	ldr	r3, [pc, #764]	; (8003f50 <HAL_RCC_OscConfig+0x8f8>)
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	2202      	movs	r2, #2
 8003c56:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003c5a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003c5e:	fa92 f2a2 	rbit	r2, r2
 8003c62:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003c66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003c6a:	fab2 f282 	clz	r2, r2
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	f042 0220 	orr.w	r2, r2, #32
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f002 021f 	and.w	r2, r2, #31
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ac      	bne.n	8003be0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8113 	beq.w	8003ec2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d07c      	beq.n	8003da6 <HAL_RCC_OscConfig+0x74e>
 8003cac:	2301      	movs	r3, #1
 8003cae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003cbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4ba2      	ldr	r3, [pc, #648]	; (8003f54 <HAL_RCC_OscConfig+0x8fc>)
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd6:	f7fe f9cb 	bl	8002070 <HAL_GetTick>
 8003cda:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce0:	f7fe f9c6 	bl	8002070 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d902      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	f000 bcfe 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d00:	fa93 f2a3 	rbit	r2, r3
 8003d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d16:	2202      	movs	r2, #2
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fa93 f2a3 	rbit	r2, r3
 8003d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fa93 f2a3 	rbit	r2, r3
 8003d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003d54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d56:	4b7e      	ldr	r3, [pc, #504]	; (8003f50 <HAL_RCC_OscConfig+0x8f8>)
 8003d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d62:	2102      	movs	r1, #2
 8003d64:	6019      	str	r1, [r3, #0]
 8003d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fa93 f1a3 	rbit	r1, r3
 8003d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d78:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d7c:	6019      	str	r1, [r3, #0]
  return result;
 8003d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d09d      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x688>
 8003da4:	e08d      	b.n	8003ec2 <HAL_RCC_OscConfig+0x86a>
 8003da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003daa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	fa93 f2a3 	rbit	r2, r3
 8003dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003dc8:	601a      	str	r2, [r3, #0]
  return result;
 8003dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003dd2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b5d      	ldr	r3, [pc, #372]	; (8003f54 <HAL_RCC_OscConfig+0x8fc>)
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	461a      	mov	r2, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de8:	f7fe f942 	bl	8002070 <HAL_GetTick>
 8003dec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe f93d 	bl	8002070 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d902      	bls.n	8003e08 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	f000 bc75 	b.w	80046f2 <HAL_RCC_OscConfig+0x109a>
 8003e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e10:	2202      	movs	r2, #2
 8003e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	fa93 f2a3 	rbit	r2, r3
 8003e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e34:	2202      	movs	r2, #2
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	fa93 f2a3 	rbit	r2, r3
 8003e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e58:	2202      	movs	r2, #2
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	fa93 f2a3 	rbit	r2, r3
 8003e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003e72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e74:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <HAL_RCC_OscConfig+0x8f8>)
 8003e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e80:	2102      	movs	r1, #2
 8003e82:	6019      	str	r1, [r3, #0]
 8003e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	fa93 f1a3 	rbit	r1, r3
 8003e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e96:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003e9a:	6019      	str	r1, [r3, #0]
  return result;
 8003e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d197      	bne.n	8003df2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 81a5 	beq.w	8004222 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ede:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <HAL_RCC_OscConfig+0x8f8>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCC_OscConfig+0x8f8>)
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_RCC_OscConfig+0x8f8>)
 8003ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	61d3      	str	r3, [r2, #28]
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <HAL_RCC_OscConfig+0x8f8>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <HAL_RCC_OscConfig+0x900>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d121      	bne.n	8003f68 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f24:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_RCC_OscConfig+0x900>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x900>)
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f30:	f7fe f89e 	bl	8002070 <HAL_GetTick>
 8003f34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e010      	b.n	8003f5c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fe f899 	bl	8002070 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d908      	bls.n	8003f5c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e3d1      	b.n	80046f2 <HAL_RCC_OscConfig+0x109a>
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	10908120 	.word	0x10908120
 8003f58:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	4b8d      	ldr	r3, [pc, #564]	; (8004194 <HAL_RCC_OscConfig+0xb3c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0e8      	beq.n	8003f3a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d106      	bne.n	8003f86 <HAL_RCC_OscConfig+0x92e>
 8003f78:	4b87      	ldr	r3, [pc, #540]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4a86      	ldr	r2, [pc, #536]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6213      	str	r3, [r2, #32]
 8003f84:	e035      	b.n	8003ff2 <HAL_RCC_OscConfig+0x99a>
 8003f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x958>
 8003f96:	4b80      	ldr	r3, [pc, #512]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a7f      	ldr	r2, [pc, #508]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003f9c:	f023 0301 	bic.w	r3, r3, #1
 8003fa0:	6213      	str	r3, [r2, #32]
 8003fa2:	4b7d      	ldr	r3, [pc, #500]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4a7c      	ldr	r2, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fa8:	f023 0304 	bic.w	r3, r3, #4
 8003fac:	6213      	str	r3, [r2, #32]
 8003fae:	e020      	b.n	8003ff2 <HAL_RCC_OscConfig+0x99a>
 8003fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d10c      	bne.n	8003fda <HAL_RCC_OscConfig+0x982>
 8003fc0:	4b75      	ldr	r3, [pc, #468]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	4a74      	ldr	r2, [pc, #464]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fc6:	f043 0304 	orr.w	r3, r3, #4
 8003fca:	6213      	str	r3, [r2, #32]
 8003fcc:	4b72      	ldr	r3, [pc, #456]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4a71      	ldr	r2, [pc, #452]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6213      	str	r3, [r2, #32]
 8003fd8:	e00b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x99a>
 8003fda:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6213      	str	r3, [r2, #32]
 8003fe6:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a6b      	ldr	r2, [pc, #428]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 8081 	beq.w	8004106 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004004:	f7fe f834 	bl	8002070 <HAL_GetTick>
 8004008:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400c:	e00b      	b.n	8004026 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fe f82f 	bl	8002070 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e365      	b.n	80046f2 <HAL_RCC_OscConfig+0x109a>
 8004026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800402e:	2202      	movs	r2, #2
 8004030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004036:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	fa93 f2a3 	rbit	r2, r3
 8004040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004044:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004052:	2202      	movs	r2, #2
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	fa93 f2a3 	rbit	r2, r3
 8004064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004068:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800406c:	601a      	str	r2, [r3, #0]
  return result;
 800406e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004072:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004076:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f043 0302 	orr.w	r3, r3, #2
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d102      	bne.n	8004092 <HAL_RCC_OscConfig+0xa3a>
 800408c:	4b42      	ldr	r3, [pc, #264]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	e013      	b.n	80040ba <HAL_RCC_OscConfig+0xa62>
 8004092:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004096:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800409a:	2202      	movs	r2, #2
 800409c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fa93 f2a3 	rbit	r2, r3
 80040ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	4b38      	ldr	r3, [pc, #224]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80040c2:	2102      	movs	r1, #2
 80040c4:	6011      	str	r1, [r2, #0]
 80040c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	fa92 f1a2 	rbit	r1, r2
 80040d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040d8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80040dc:	6011      	str	r1, [r2, #0]
  return result;
 80040de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040e2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	fab2 f282 	clz	r2, r2
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	f002 021f 	and.w	r2, r2, #31
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f202 	lsl.w	r2, r1, r2
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d084      	beq.n	800400e <HAL_RCC_OscConfig+0x9b6>
 8004104:	e083      	b.n	800420e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fd ffb3 	bl	8002070 <HAL_GetTick>
 800410a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fd ffae 	bl	8002070 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e2e4      	b.n	80046f2 <HAL_RCC_OscConfig+0x109a>
 8004128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004130:	2202      	movs	r2, #2
 8004132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004138:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	fa93 f2a3 	rbit	r2, r3
 8004142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004146:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004150:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004154:	2202      	movs	r2, #2
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800415c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800416a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800416e:	601a      	str	r2, [r3, #0]
  return result;
 8004170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004174:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004178:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800417a:	fab3 f383 	clz	r3, r3
 800417e:	b2db      	uxtb	r3, r3
 8004180:	095b      	lsrs	r3, r3, #5
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d106      	bne.n	800419c <HAL_RCC_OscConfig+0xb44>
 800418e:	4b02      	ldr	r3, [pc, #8]	; (8004198 <HAL_RCC_OscConfig+0xb40>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	e017      	b.n	80041c4 <HAL_RCC_OscConfig+0xb6c>
 8004194:	40007000 	.word	0x40007000
 8004198:	40021000 	.word	0x40021000
 800419c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80041a4:	2202      	movs	r2, #2
 80041a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	fa93 f2a3 	rbit	r2, r3
 80041b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ba:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	4bb3      	ldr	r3, [pc, #716]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80041cc:	2102      	movs	r1, #2
 80041ce:	6011      	str	r1, [r2, #0]
 80041d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041d4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	fa92 f1a2 	rbit	r1, r2
 80041de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041e2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80041e6:	6011      	str	r1, [r2, #0]
  return result;
 80041e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041ec:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	fab2 f282 	clz	r2, r2
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	f002 021f 	and.w	r2, r2, #31
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d180      	bne.n	8004110 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800420e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004212:	2b01      	cmp	r3, #1
 8004214:	d105      	bne.n	8004222 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004216:	4b9e      	ldr	r3, [pc, #632]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	4a9d      	ldr	r2, [pc, #628]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 800421c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004220:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004226:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 825e 	beq.w	80046f0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004234:	4b96      	ldr	r3, [pc, #600]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	f000 821f 	beq.w	8004680 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004246:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	2b02      	cmp	r3, #2
 8004250:	f040 8170 	bne.w	8004534 <HAL_RCC_OscConfig+0xedc>
 8004254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004258:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800425c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004266:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	fa93 f2a3 	rbit	r2, r3
 8004270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004274:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004278:	601a      	str	r2, [r3, #0]
  return result;
 800427a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800427e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004282:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004284:	fab3 f383 	clz	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800428e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	461a      	mov	r2, r3
 8004296:	2300      	movs	r3, #0
 8004298:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7fd fee9 	bl	8002070 <HAL_GetTick>
 800429e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a2:	e009      	b.n	80042b8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fd fee4 	bl	8002070 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e21c      	b.n	80046f2 <HAL_RCC_OscConfig+0x109a>
 80042b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80042c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	fa93 f2a3 	rbit	r2, r3
 80042d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042d8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80042dc:	601a      	str	r2, [r3, #0]
  return result;
 80042de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80042e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d102      	bne.n	8004302 <HAL_RCC_OscConfig+0xcaa>
 80042fc:	4b64      	ldr	r3, [pc, #400]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	e027      	b.n	8004352 <HAL_RCC_OscConfig+0xcfa>
 8004302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004306:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800430a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800430e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004314:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	fa93 f2a3 	rbit	r2, r3
 800431e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004322:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800432c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	fa93 f2a3 	rbit	r2, r3
 8004344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004348:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004356:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800435a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800435e:	6011      	str	r1, [r2, #0]
 8004360:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004364:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	fa92 f1a2 	rbit	r1, r2
 800436e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004372:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004376:	6011      	str	r1, [r2, #0]
  return result;
 8004378:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800437c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	fab2 f282 	clz	r2, r2
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	f042 0220 	orr.w	r2, r2, #32
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	f002 021f 	and.w	r2, r2, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d182      	bne.n	80042a4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800439e:	4b3c      	ldr	r3, [pc, #240]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	f023 020f 	bic.w	r2, r3, #15
 80043a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	4937      	ldr	r1, [pc, #220]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80043b8:	4b35      	ldr	r3, [pc, #212]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80043c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6a19      	ldr	r1, [r3, #32]
 80043cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	430b      	orrs	r3, r1
 80043da:	492d      	ldr	r1, [pc, #180]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
 80043e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043e4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80043e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043f2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	fa93 f2a3 	rbit	r2, r3
 80043fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004400:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004404:	601a      	str	r2, [r3, #0]
  return result;
 8004406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800440a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800440e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004410:	fab3 f383 	clz	r3, r3
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800441a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	461a      	mov	r2, r3
 8004422:	2301      	movs	r3, #1
 8004424:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fd fe23 	bl	8002070 <HAL_GetTick>
 800442a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800442e:	e009      	b.n	8004444 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004430:	f7fd fe1e 	bl	8002070 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e156      	b.n	80046f2 <HAL_RCC_OscConfig+0x109a>
 8004444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004448:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800444c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004456:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	fa93 f2a3 	rbit	r2, r3
 8004460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004464:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004468:	601a      	str	r2, [r3, #0]
  return result;
 800446a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004472:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004474:	fab3 f383 	clz	r3, r3
 8004478:	b2db      	uxtb	r3, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_RCC_OscConfig+0xe3c>
 8004488:	4b01      	ldr	r3, [pc, #4]	; (8004490 <HAL_RCC_OscConfig+0xe38>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	e02a      	b.n	80044e4 <HAL_RCC_OscConfig+0xe8c>
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000
 8004494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004498:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800449c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044a6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	fa93 f2a3 	rbit	r2, r3
 80044b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80044c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044cc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	fa93 f2a3 	rbit	r2, r3
 80044d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044da:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	4b86      	ldr	r3, [pc, #536]	; (80046fc <HAL_RCC_OscConfig+0x10a4>)
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044e8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80044ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044f0:	6011      	str	r1, [r2, #0]
 80044f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80044f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80044fa:	6812      	ldr	r2, [r2, #0]
 80044fc:	fa92 f1a2 	rbit	r1, r2
 8004500:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004504:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004508:	6011      	str	r1, [r2, #0]
  return result;
 800450a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800450e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	fab2 f282 	clz	r2, r2
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	f042 0220 	orr.w	r2, r2, #32
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	f002 021f 	and.w	r2, r2, #31
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f202 	lsl.w	r2, r1, r2
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f43f af7f 	beq.w	8004430 <HAL_RCC_OscConfig+0xdd8>
 8004532:	e0dd      	b.n	80046f0 <HAL_RCC_OscConfig+0x1098>
 8004534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004538:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800453c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004546:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	fa93 f2a3 	rbit	r2, r3
 8004550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004554:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004558:	601a      	str	r2, [r3, #0]
  return result;
 800455a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800455e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004562:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800456e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	461a      	mov	r2, r3
 8004576:	2300      	movs	r3, #0
 8004578:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fd fd79 	bl	8002070 <HAL_GetTick>
 800457e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004582:	e009      	b.n	8004598 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd fd74 	bl	8002070 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e0ac      	b.n	80046f2 <HAL_RCC_OscConfig+0x109a>
 8004598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800459c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80045a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045aa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	fa93 f2a3 	rbit	r2, r3
 80045b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80045bc:	601a      	str	r2, [r3, #0]
  return result;
 80045be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80045c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d102      	bne.n	80045e2 <HAL_RCC_OscConfig+0xf8a>
 80045dc:	4b47      	ldr	r3, [pc, #284]	; (80046fc <HAL_RCC_OscConfig+0x10a4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	e027      	b.n	8004632 <HAL_RCC_OscConfig+0xfda>
 80045e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80045ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	fa93 f2a3 	rbit	r2, r3
 80045fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004602:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800460c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800461a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	fa93 f2a3 	rbit	r2, r3
 8004624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004628:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	4b33      	ldr	r3, [pc, #204]	; (80046fc <HAL_RCC_OscConfig+0x10a4>)
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004636:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800463a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800463e:	6011      	str	r1, [r2, #0]
 8004640:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004644:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	fa92 f1a2 	rbit	r1, r2
 800464e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004652:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004656:	6011      	str	r1, [r2, #0]
  return result;
 8004658:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800465c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	fab2 f282 	clz	r2, r2
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	f002 021f 	and.w	r2, r2, #31
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d182      	bne.n	8004584 <HAL_RCC_OscConfig+0xf2c>
 800467e:	e037      	b.n	80046f0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004684:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e02e      	b.n	80046f2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004694:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_RCC_OscConfig+0x10a4>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800469c:	4b17      	ldr	r3, [pc, #92]	; (80046fc <HAL_RCC_OscConfig+0x10a4>)
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046a8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80046ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d117      	bne.n	80046ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80046bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046c0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d10b      	bne.n	80046ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80046d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40021000 	.word	0x40021000

08004700 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b09e      	sub	sp, #120	; 0x78
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e162      	b.n	80049de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004718:	4b90      	ldr	r3, [pc, #576]	; (800495c <HAL_RCC_ClockConfig+0x25c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d910      	bls.n	8004748 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b8d      	ldr	r3, [pc, #564]	; (800495c <HAL_RCC_ClockConfig+0x25c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 0207 	bic.w	r2, r3, #7
 800472e:	498b      	ldr	r1, [pc, #556]	; (800495c <HAL_RCC_ClockConfig+0x25c>)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004736:	4b89      	ldr	r3, [pc, #548]	; (800495c <HAL_RCC_ClockConfig+0x25c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e14a      	b.n	80049de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4b82      	ldr	r3, [pc, #520]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	497f      	ldr	r1, [pc, #508]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004762:	4313      	orrs	r3, r2
 8004764:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80dc 	beq.w	800492c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d13c      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xf6>
 800477c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004780:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800478a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478c:	fab3 f383 	clz	r3, r3
 8004790:	b2db      	uxtb	r3, r3
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b01      	cmp	r3, #1
 800479e:	d102      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xa6>
 80047a0:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	e00f      	b.n	80047c6 <HAL_RCC_ClockConfig+0xc6>
 80047a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	667b      	str	r3, [r7, #100]	; 0x64
 80047b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047b8:	663b      	str	r3, [r7, #96]	; 0x60
 80047ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047bc:	fa93 f3a3 	rbit	r3, r3
 80047c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80047cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ce:	fa92 f2a2 	rbit	r2, r2
 80047d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80047d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047d6:	fab2 f282 	clz	r2, r2
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	f042 0220 	orr.w	r2, r2, #32
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	f002 021f 	and.w	r2, r2, #31
 80047e6:	2101      	movs	r1, #1
 80047e8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d17b      	bne.n	80048ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e0f3      	b.n	80049de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d13c      	bne.n	8004878 <HAL_RCC_ClockConfig+0x178>
 80047fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004802:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004806:	fa93 f3a3 	rbit	r3, r3
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800480c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d102      	bne.n	8004828 <HAL_RCC_ClockConfig+0x128>
 8004822:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	e00f      	b.n	8004848 <HAL_RCC_ClockConfig+0x148>
 8004828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	647b      	str	r3, [r7, #68]	; 0x44
 8004836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
 800483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004844:	4b46      	ldr	r3, [pc, #280]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800484c:	63ba      	str	r2, [r7, #56]	; 0x38
 800484e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004850:	fa92 f2a2 	rbit	r2, r2
 8004854:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004858:	fab2 f282 	clz	r2, r2
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	f002 021f 	and.w	r2, r2, #31
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f202 	lsl.w	r2, r1, r2
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d13a      	bne.n	80048ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0b2      	b.n	80049de <HAL_RCC_ClockConfig+0x2de>
 8004878:	2302      	movs	r3, #2
 800487a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d102      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x1a0>
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	e00d      	b.n	80048bc <HAL_RCC_ClockConfig+0x1bc>
 80048a0:	2302      	movs	r3, #2
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	2302      	movs	r3, #2
 80048ae:	623b      	str	r3, [r7, #32]
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	4b29      	ldr	r3, [pc, #164]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	2202      	movs	r2, #2
 80048be:	61ba      	str	r2, [r7, #24]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	fa92 f2a2 	rbit	r2, r2
 80048c6:	617a      	str	r2, [r7, #20]
  return result;
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	fab2 f282 	clz	r2, r2
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	f042 0220 	orr.w	r2, r2, #32
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	f002 021f 	and.w	r2, r2, #31
 80048da:	2101      	movs	r1, #1
 80048dc:	fa01 f202 	lsl.w	r2, r1, r2
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e079      	b.n	80049de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	491a      	ldr	r1, [pc, #104]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048fc:	f7fd fbb8 	bl	8002070 <HAL_GetTick>
 8004900:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fd fbb4 	bl	8002070 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e061      	b.n	80049de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <HAL_RCC_ClockConfig+0x260>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_RCC_ClockConfig+0x25c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d214      	bcs.n	8004964 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b08      	ldr	r3, [pc, #32]	; (800495c <HAL_RCC_ClockConfig+0x25c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f023 0207 	bic.w	r2, r3, #7
 8004942:	4906      	ldr	r1, [pc, #24]	; (800495c <HAL_RCC_ClockConfig+0x25c>)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b04      	ldr	r3, [pc, #16]	; (800495c <HAL_RCC_ClockConfig+0x25c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d005      	beq.n	8004964 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e040      	b.n	80049de <HAL_RCC_ClockConfig+0x2de>
 800495c:	40022000 	.word	0x40022000
 8004960:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	4b1d      	ldr	r3, [pc, #116]	; (80049e8 <HAL_RCC_ClockConfig+0x2e8>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	491a      	ldr	r1, [pc, #104]	; (80049e8 <HAL_RCC_ClockConfig+0x2e8>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800498e:	4b16      	ldr	r3, [pc, #88]	; (80049e8 <HAL_RCC_ClockConfig+0x2e8>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4912      	ldr	r1, [pc, #72]	; (80049e8 <HAL_RCC_ClockConfig+0x2e8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049a2:	f000 f829 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 80049a6:	4601      	mov	r1, r0
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <HAL_RCC_ClockConfig+0x2e8>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b0:	22f0      	movs	r2, #240	; 0xf0
 80049b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	fa92 f2a2 	rbit	r2, r2
 80049ba:	60fa      	str	r2, [r7, #12]
  return result;
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	fab2 f282 	clz	r2, r2
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	40d3      	lsrs	r3, r2
 80049c6:	4a09      	ldr	r2, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x2ec>)
 80049c8:	5cd3      	ldrb	r3, [r2, r3]
 80049ca:	fa21 f303 	lsr.w	r3, r1, r3
 80049ce:	4a08      	ldr	r2, [pc, #32]	; (80049f0 <HAL_RCC_ClockConfig+0x2f0>)
 80049d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80049d2:	4b08      	ldr	r3, [pc, #32]	; (80049f4 <HAL_RCC_ClockConfig+0x2f4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fd fb06 	bl	8001fe8 <HAL_InitTick>
  
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3778      	adds	r7, #120	; 0x78
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	080076f0 	.word	0x080076f0
 80049f0:	20000024 	.word	0x20000024
 80049f4:	20000028 	.word	0x20000028

080049f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b08b      	sub	sp, #44	; 0x2c
 80049fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	2300      	movs	r3, #0
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a12:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d002      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x30>
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0x36>
 8004a26:	e03f      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a28:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a2a:	623b      	str	r3, [r7, #32]
      break;
 8004a2c:	e03f      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004a34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004a38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	fa92 f2a2 	rbit	r2, r2
 8004a40:	607a      	str	r2, [r7, #4]
  return result;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	fab2 f282 	clz	r2, r2
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	40d3      	lsrs	r3, r2
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a52:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	220f      	movs	r2, #15
 8004a5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	fa92 f2a2 	rbit	r2, r2
 8004a64:	60fa      	str	r2, [r7, #12]
  return result;
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	fab2 f282 	clz	r2, r2
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	40d3      	lsrs	r3, r2
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a72:	5cd3      	ldrb	r3, [r2, r3]
 8004a74:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a90:	e007      	b.n	8004aa2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a92:	4a0b      	ldr	r2, [pc, #44]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	623b      	str	r3, [r7, #32]
      break;
 8004aa6:	e002      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004aaa:	623b      	str	r3, [r7, #32]
      break;
 8004aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aae:	6a3b      	ldr	r3, [r7, #32]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	372c      	adds	r7, #44	; 0x2c
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	007a1200 	.word	0x007a1200
 8004ac4:	08007708 	.word	0x08007708
 8004ac8:	08007718 	.word	0x08007718

08004acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad0:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000024 	.word	0x20000024

08004ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004aea:	f7ff ffef 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004aee:	4601      	mov	r1, r0
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004af8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004afc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	fa92 f2a2 	rbit	r2, r2
 8004b04:	603a      	str	r2, [r7, #0]
  return result;
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	fab2 f282 	clz	r2, r2
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	40d3      	lsrs	r3, r2
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004b12:	5cd3      	ldrb	r3, [r2, r3]
 8004b14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40021000 	.word	0x40021000
 8004b24:	08007700 	.word	0x08007700

08004b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004b2e:	f7ff ffcd 	bl	8004acc <HAL_RCC_GetHCLKFreq>
 8004b32:	4601      	mov	r1, r0
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004b3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004b40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	fa92 f2a2 	rbit	r2, r2
 8004b48:	603a      	str	r2, [r7, #0]
  return result;
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	fab2 f282 	clz	r2, r2
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	40d3      	lsrs	r3, r2
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004b56:	5cd3      	ldrb	r3, [r2, r3]
 8004b58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000
 8004b68:	08007700 	.word	0x08007700

08004b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b092      	sub	sp, #72	; 0x48
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80d4 	beq.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b90:	4b4e      	ldr	r3, [pc, #312]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10e      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	4a4a      	ldr	r2, [pc, #296]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	61d3      	str	r3, [r2, #28]
 8004ba8:	4b48      	ldr	r3, [pc, #288]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bba:	4b45      	ldr	r3, [pc, #276]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d118      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bc6:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a41      	ldr	r2, [pc, #260]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd2:	f7fd fa4d 	bl	8002070 <HAL_GetTick>
 8004bd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd8:	e008      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bda:	f7fd fa49 	bl	8002070 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b64      	cmp	r3, #100	; 0x64
 8004be6:	d901      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e1d6      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bec:	4b38      	ldr	r3, [pc, #224]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f0      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bf8:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8084 	beq.w	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d07c      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c32:	fab3 f383 	clz	r3, r3
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	461a      	mov	r2, r3
 8004c42:	2301      	movs	r3, #1
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4e:	fa93 f3a3 	rbit	r3, r3
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c56:	fab3 f383 	clz	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b1d      	ldr	r3, [pc, #116]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	461a      	mov	r2, r3
 8004c66:	2300      	movs	r3, #0
 8004c68:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c6a:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d04b      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7a:	f7fd f9f9 	bl	8002070 <HAL_GetTick>
 8004c7e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c80:	e00a      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c82:	f7fd f9f5 	bl	8002070 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e180      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	623b      	str	r3, [r7, #32]
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	61fb      	str	r3, [r7, #28]
  return result;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f043 0302 	orr.w	r3, r3, #2
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d108      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004cc6:	4b01      	ldr	r3, [pc, #4]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	e00d      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	10908100 	.word	0x10908100
 8004cd8:	2302      	movs	r3, #2
 8004cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	4b9a      	ldr	r3, [pc, #616]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	2202      	movs	r2, #2
 8004cea:	613a      	str	r2, [r7, #16]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	fa92 f2a2 	rbit	r2, r2
 8004cf2:	60fa      	str	r2, [r7, #12]
  return result;
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	fab2 f282 	clz	r2, r2
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	f002 021f 	and.w	r2, r2, #31
 8004d06:	2101      	movs	r1, #1
 8004d08:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0b7      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d12:	4b8f      	ldr	r3, [pc, #572]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	498c      	ldr	r1, [pc, #560]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2c:	4b88      	ldr	r3, [pc, #544]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4a87      	ldr	r2, [pc, #540]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d44:	4b82      	ldr	r3, [pc, #520]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	f023 0203 	bic.w	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	497f      	ldr	r1, [pc, #508]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d008      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d62:	4b7b      	ldr	r3, [pc, #492]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	4978      	ldr	r1, [pc, #480]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d80:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	4970      	ldr	r1, [pc, #448]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d9e:	4b6c      	ldr	r3, [pc, #432]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f023 0210 	bic.w	r2, r3, #16
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	4969      	ldr	r1, [pc, #420]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004dbc:	4b64      	ldr	r3, [pc, #400]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	4961      	ldr	r1, [pc, #388]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dda:	4b5d      	ldr	r3, [pc, #372]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	f023 0220 	bic.w	r2, r3, #32
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	495a      	ldr	r1, [pc, #360]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004df8:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	4952      	ldr	r1, [pc, #328]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e16:	4b4e      	ldr	r3, [pc, #312]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	494b      	ldr	r1, [pc, #300]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e34:	4b46      	ldr	r3, [pc, #280]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	4943      	ldr	r1, [pc, #268]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e52:	4b3f      	ldr	r3, [pc, #252]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	493c      	ldr	r1, [pc, #240]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e70:	4b37      	ldr	r3, [pc, #220]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	4934      	ldr	r1, [pc, #208]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	492d      	ldr	r1, [pc, #180]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004eac:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	4925      	ldr	r1, [pc, #148]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004eca:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	491e      	ldr	r1, [pc, #120]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	4916      	ldr	r1, [pc, #88]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	490f      	ldr	r1, [pc, #60]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f28:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	4907      	ldr	r1, [pc, #28]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00c      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004f42:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	e002      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f56:	4913      	ldr	r1, [pc, #76]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f74:	490b      	ldr	r1, [pc, #44]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f92:	4904      	ldr	r1, [pc, #16]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3748      	adds	r7, #72	; 0x48
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e049      	b.n	800504e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fc fe64 	bl	8001c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f000 fb1e 	bl	8005628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d001      	beq.n	8005070 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e047      	b.n	8005100 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a23      	ldr	r2, [pc, #140]	; (800510c <HAL_TIM_Base_Start+0xb4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01d      	beq.n	80050be <HAL_TIM_Base_Start+0x66>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d018      	beq.n	80050be <HAL_TIM_Base_Start+0x66>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <HAL_TIM_Base_Start+0xb8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_TIM_Base_Start+0x66>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <HAL_TIM_Base_Start+0xbc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00e      	beq.n	80050be <HAL_TIM_Base_Start+0x66>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1c      	ldr	r2, [pc, #112]	; (8005118 <HAL_TIM_Base_Start+0xc0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d009      	beq.n	80050be <HAL_TIM_Base_Start+0x66>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1b      	ldr	r2, [pc, #108]	; (800511c <HAL_TIM_Base_Start+0xc4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d004      	beq.n	80050be <HAL_TIM_Base_Start+0x66>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a19      	ldr	r2, [pc, #100]	; (8005120 <HAL_TIM_Base_Start+0xc8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d115      	bne.n	80050ea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	4b17      	ldr	r3, [pc, #92]	; (8005124 <HAL_TIM_Base_Start+0xcc>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	d015      	beq.n	80050fc <HAL_TIM_Base_Start+0xa4>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d6:	d011      	beq.n	80050fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e8:	e008      	b.n	80050fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e000      	b.n	80050fe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800
 8005118:	40013400 	.word	0x40013400
 800511c:	40014000 	.word	0x40014000
 8005120:	40015000 	.word	0x40015000
 8005124:	00010007 	.word	0x00010007

08005128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e04f      	b.n	80051e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a23      	ldr	r2, [pc, #140]	; (80051ec <HAL_TIM_Base_Start_IT+0xc4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01d      	beq.n	800519e <HAL_TIM_Base_Start_IT+0x76>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d018      	beq.n	800519e <HAL_TIM_Base_Start_IT+0x76>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_TIM_Base_Start_IT+0x76>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <HAL_TIM_Base_Start_IT+0x76>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_TIM_Base_Start_IT+0x76>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_TIM_Base_Start_IT+0x76>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a19      	ldr	r2, [pc, #100]	; (8005200 <HAL_TIM_Base_Start_IT+0xd8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d115      	bne.n	80051ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	4b17      	ldr	r3, [pc, #92]	; (8005204 <HAL_TIM_Base_Start_IT+0xdc>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d015      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0xb4>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b6:	d011      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	e008      	b.n	80051dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	e000      	b.n	80051de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40000400 	.word	0x40000400
 80051f4:	40000800 	.word	0x40000800
 80051f8:	40013400 	.word	0x40013400
 80051fc:	40014000 	.word	0x40014000
 8005200:	40015000 	.word	0x40015000
 8005204:	00010007 	.word	0x00010007

08005208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b02      	cmp	r3, #2
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0202 	mvn.w	r2, #2
 8005234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9ce 	bl	80055ec <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9c0 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9d1 	bl	8005600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b04      	cmp	r3, #4
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0204 	mvn.w	r2, #4
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f9a4 	bl	80055ec <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f996 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f9a7 	bl	8005600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d122      	bne.n	800530c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0208 	mvn.w	r2, #8
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2204      	movs	r2, #4
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f97a 	bl	80055ec <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f96c 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f97d 	bl	8005600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	2b10      	cmp	r3, #16
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0210 	mvn.w	r2, #16
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2208      	movs	r2, #8
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f950 	bl	80055ec <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f942 	bl	80055d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f953 	bl	8005600 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0201 	mvn.w	r2, #1
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc f910 	bl	80015ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b80      	cmp	r3, #128	; 0x80
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb06 	bl	80059c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c6:	d10e      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	d107      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 faf9 	bl	80059d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d10e      	bne.n	8005412 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fe:	2b40      	cmp	r3, #64	; 0x40
 8005400:	d107      	bne.n	8005412 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f901 	bl	8005614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b20      	cmp	r3, #32
 800541e:	d10e      	bne.n	800543e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b20      	cmp	r3, #32
 800542c:	d107      	bne.n	800543e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f06f 0220 	mvn.w	r2, #32
 8005436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fab9 	bl	80059b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_TIM_ConfigClockSource+0x1c>
 800545e:	2302      	movs	r3, #2
 8005460:	e0b6      	b.n	80055d0 <HAL_TIM_ConfigClockSource+0x18a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005480:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005484:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800549e:	d03e      	beq.n	800551e <HAL_TIM_ConfigClockSource+0xd8>
 80054a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a4:	f200 8087 	bhi.w	80055b6 <HAL_TIM_ConfigClockSource+0x170>
 80054a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ac:	f000 8086 	beq.w	80055bc <HAL_TIM_ConfigClockSource+0x176>
 80054b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b4:	d87f      	bhi.n	80055b6 <HAL_TIM_ConfigClockSource+0x170>
 80054b6:	2b70      	cmp	r3, #112	; 0x70
 80054b8:	d01a      	beq.n	80054f0 <HAL_TIM_ConfigClockSource+0xaa>
 80054ba:	2b70      	cmp	r3, #112	; 0x70
 80054bc:	d87b      	bhi.n	80055b6 <HAL_TIM_ConfigClockSource+0x170>
 80054be:	2b60      	cmp	r3, #96	; 0x60
 80054c0:	d050      	beq.n	8005564 <HAL_TIM_ConfigClockSource+0x11e>
 80054c2:	2b60      	cmp	r3, #96	; 0x60
 80054c4:	d877      	bhi.n	80055b6 <HAL_TIM_ConfigClockSource+0x170>
 80054c6:	2b50      	cmp	r3, #80	; 0x50
 80054c8:	d03c      	beq.n	8005544 <HAL_TIM_ConfigClockSource+0xfe>
 80054ca:	2b50      	cmp	r3, #80	; 0x50
 80054cc:	d873      	bhi.n	80055b6 <HAL_TIM_ConfigClockSource+0x170>
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d058      	beq.n	8005584 <HAL_TIM_ConfigClockSource+0x13e>
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d86f      	bhi.n	80055b6 <HAL_TIM_ConfigClockSource+0x170>
 80054d6:	2b30      	cmp	r3, #48	; 0x30
 80054d8:	d064      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x15e>
 80054da:	2b30      	cmp	r3, #48	; 0x30
 80054dc:	d86b      	bhi.n	80055b6 <HAL_TIM_ConfigClockSource+0x170>
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d060      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x15e>
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d867      	bhi.n	80055b6 <HAL_TIM_ConfigClockSource+0x170>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d05c      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x15e>
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d05a      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x15e>
 80054ee:	e062      	b.n	80055b6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6899      	ldr	r1, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f000 f9aa 	bl	8005858 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005512:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	609a      	str	r2, [r3, #8]
      break;
 800551c:	e04f      	b.n	80055be <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6899      	ldr	r1, [r3, #8]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f000 f993 	bl	8005858 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005540:	609a      	str	r2, [r3, #8]
      break;
 8005542:	e03c      	b.n	80055be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	6859      	ldr	r1, [r3, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	461a      	mov	r2, r3
 8005552:	f000 f907 	bl	8005764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2150      	movs	r1, #80	; 0x50
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f960 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8005562:	e02c      	b.n	80055be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	461a      	mov	r2, r3
 8005572:	f000 f926 	bl	80057c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2160      	movs	r1, #96	; 0x60
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f950 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8005582:	e01c      	b.n	80055be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	461a      	mov	r2, r3
 8005592:	f000 f8e7 	bl	8005764 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2140      	movs	r1, #64	; 0x40
 800559c:	4618      	mov	r0, r3
 800559e:	f000 f940 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 80055a2:	e00c      	b.n	80055be <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f000 f937 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 80055b4:	e003      	b.n	80055be <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
      break;
 80055ba:	e000      	b.n	80055be <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a42      	ldr	r2, [pc, #264]	; (8005744 <TIM_Base_SetConfig+0x11c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005646:	d00f      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3f      	ldr	r2, [pc, #252]	; (8005748 <TIM_Base_SetConfig+0x120>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00b      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3e      	ldr	r2, [pc, #248]	; (800574c <TIM_Base_SetConfig+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3d      	ldr	r2, [pc, #244]	; (8005750 <TIM_Base_SetConfig+0x128>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3c      	ldr	r2, [pc, #240]	; (8005754 <TIM_Base_SetConfig+0x12c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d108      	bne.n	800567a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a31      	ldr	r2, [pc, #196]	; (8005744 <TIM_Base_SetConfig+0x11c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01f      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005688:	d01b      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2e      	ldr	r2, [pc, #184]	; (8005748 <TIM_Base_SetConfig+0x120>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d017      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2d      	ldr	r2, [pc, #180]	; (800574c <TIM_Base_SetConfig+0x124>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2c      	ldr	r2, [pc, #176]	; (8005750 <TIM_Base_SetConfig+0x128>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2c      	ldr	r2, [pc, #176]	; (8005758 <TIM_Base_SetConfig+0x130>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2b      	ldr	r2, [pc, #172]	; (800575c <TIM_Base_SetConfig+0x134>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2a      	ldr	r2, [pc, #168]	; (8005760 <TIM_Base_SetConfig+0x138>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a25      	ldr	r2, [pc, #148]	; (8005754 <TIM_Base_SetConfig+0x12c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a12      	ldr	r2, [pc, #72]	; (8005744 <TIM_Base_SetConfig+0x11c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <TIM_Base_SetConfig+0x100>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a13      	ldr	r2, [pc, #76]	; (8005750 <TIM_Base_SetConfig+0x128>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00f      	beq.n	8005728 <TIM_Base_SetConfig+0x100>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a13      	ldr	r2, [pc, #76]	; (8005758 <TIM_Base_SetConfig+0x130>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00b      	beq.n	8005728 <TIM_Base_SetConfig+0x100>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a12      	ldr	r2, [pc, #72]	; (800575c <TIM_Base_SetConfig+0x134>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_Base_SetConfig+0x100>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a11      	ldr	r2, [pc, #68]	; (8005760 <TIM_Base_SetConfig+0x138>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_Base_SetConfig+0x100>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <TIM_Base_SetConfig+0x12c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d103      	bne.n	8005730 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	615a      	str	r2, [r3, #20]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40013400 	.word	0x40013400
 8005754:	40015000 	.word	0x40015000
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800

08005764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 030a 	bic.w	r3, r3, #10
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b087      	sub	sp, #28
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f023 0210 	bic.w	r2, r3, #16
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	031b      	lsls	r3, r3, #12
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	f043 0307 	orr.w	r3, r3, #7
 8005844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	431a      	orrs	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	609a      	str	r2, [r3, #8]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e06d      	b.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a30      	ldr	r2, [pc, #192]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a2f      	ldr	r2, [pc, #188]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a2d      	ldr	r2, [pc, #180]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d108      	bne.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1e      	ldr	r2, [pc, #120]	; (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d01d      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592c:	d018      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1a      	ldr	r2, [pc, #104]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a11      	ldr	r2, [pc, #68]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10c      	bne.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005966:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	4313      	orrs	r3, r2
 8005970:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40013400 	.word	0x40013400
 80059a0:	40015000 	.word	0x40015000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40014000 	.word	0x40014000

080059b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e040      	b.n	8005a80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc f97e 	bl	8001d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	; 0x24
 8005a18:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f992 	bl	8005d54 <UART_SetConfig>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e022      	b.n	8005a80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fb5c 	bl	8006100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fbe3 	bl	8006244 <UART_CheckIdleState>
 8005a7e:	4603      	mov	r3, r0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	f040 8082 	bne.w	8005ba6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_UART_Transmit+0x26>
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e07a      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_UART_Transmit+0x38>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e073      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2221      	movs	r2, #33	; 0x21
 8005ad4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad6:	f7fc facb 	bl	8002070 <HAL_GetTick>
 8005ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af4:	d108      	bne.n	8005b08 <HAL_UART_Transmit+0x80>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e003      	b.n	8005b10 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b18:	e02d      	b.n	8005b76 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 fbd6 	bl	80062d6 <UART_WaitOnFlagUntilTimeout>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e039      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	881a      	ldrh	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b46:	b292      	uxth	r2, r2
 8005b48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	61bb      	str	r3, [r7, #24]
 8005b50:	e008      	b.n	8005b64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	781a      	ldrb	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	b292      	uxth	r2, r2
 8005b5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	3301      	adds	r3, #1
 8005b62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1cb      	bne.n	8005b1a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2140      	movs	r1, #64	; 0x40
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fba2 	bl	80062d6 <UART_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e005      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e000      	b.n	8005ba8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	f040 80bf 	bne.w	8005d48 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <HAL_UART_Receive+0x26>
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e0b7      	b.n	8005d4a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_UART_Receive+0x38>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0b0      	b.n	8005d4a <HAL_UART_Receive+0x19a>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2222      	movs	r2, #34	; 0x22
 8005bfc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c04:	f7fc fa34 	bl	8002070 <HAL_GetTick>
 8005c08:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	88fa      	ldrh	r2, [r7, #6]
 8005c0e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c22:	d10e      	bne.n	8005c42 <HAL_UART_Receive+0x92>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <HAL_UART_Receive+0x88>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c36:	e02d      	b.n	8005c94 <HAL_UART_Receive+0xe4>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	22ff      	movs	r2, #255	; 0xff
 8005c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c40:	e028      	b.n	8005c94 <HAL_UART_Receive+0xe4>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <HAL_UART_Receive+0xb6>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Receive+0xac>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	22ff      	movs	r2, #255	; 0xff
 8005c56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c5a:	e01b      	b.n	8005c94 <HAL_UART_Receive+0xe4>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	227f      	movs	r2, #127	; 0x7f
 8005c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c64:	e016      	b.n	8005c94 <HAL_UART_Receive+0xe4>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6e:	d10d      	bne.n	8005c8c <HAL_UART_Receive+0xdc>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d104      	bne.n	8005c82 <HAL_UART_Receive+0xd2>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	227f      	movs	r2, #127	; 0x7f
 8005c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c80:	e008      	b.n	8005c94 <HAL_UART_Receive+0xe4>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	223f      	movs	r2, #63	; 0x3f
 8005c86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005c8a:	e003      	b.n	8005c94 <HAL_UART_Receive+0xe4>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c9a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca4:	d108      	bne.n	8005cb8 <HAL_UART_Receive+0x108>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d104      	bne.n	8005cb8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	e003      	b.n	8005cc0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005cc8:	e033      	b.n	8005d32 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2120      	movs	r1, #32
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fafe 	bl	80062d6 <UART_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e032      	b.n	8005d4a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10c      	bne.n	8005d04 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	8a7b      	ldrh	r3, [r7, #18]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	3302      	adds	r3, #2
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e00d      	b.n	8005d20 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	8a7b      	ldrh	r3, [r7, #18]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	4013      	ands	r3, r2
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1c5      	bne.n	8005cca <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b92      	ldr	r3, [pc, #584]	; (8005fc8 <UART_SetConfig+0x274>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a80      	ldr	r2, [pc, #512]	; (8005fcc <UART_SetConfig+0x278>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d120      	bne.n	8005e12 <UART_SetConfig+0xbe>
 8005dd0:	4b7f      	ldr	r3, [pc, #508]	; (8005fd0 <UART_SetConfig+0x27c>)
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d817      	bhi.n	8005e0c <UART_SetConfig+0xb8>
 8005ddc:	a201      	add	r2, pc, #4	; (adr r2, 8005de4 <UART_SetConfig+0x90>)
 8005dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de2:	bf00      	nop
 8005de4:	08005df5 	.word	0x08005df5
 8005de8:	08005e01 	.word	0x08005e01
 8005dec:	08005e07 	.word	0x08005e07
 8005df0:	08005dfb 	.word	0x08005dfb
 8005df4:	2301      	movs	r3, #1
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e0b5      	b.n	8005f66 <UART_SetConfig+0x212>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e0b2      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e00:	2304      	movs	r3, #4
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e0af      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e06:	2308      	movs	r3, #8
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	e0ac      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e0a9      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a6f      	ldr	r2, [pc, #444]	; (8005fd4 <UART_SetConfig+0x280>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d124      	bne.n	8005e66 <UART_SetConfig+0x112>
 8005e1c:	4b6c      	ldr	r3, [pc, #432]	; (8005fd0 <UART_SetConfig+0x27c>)
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e28:	d011      	beq.n	8005e4e <UART_SetConfig+0xfa>
 8005e2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e2e:	d817      	bhi.n	8005e60 <UART_SetConfig+0x10c>
 8005e30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e34:	d011      	beq.n	8005e5a <UART_SetConfig+0x106>
 8005e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e3a:	d811      	bhi.n	8005e60 <UART_SetConfig+0x10c>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <UART_SetConfig+0xf4>
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e44:	d006      	beq.n	8005e54 <UART_SetConfig+0x100>
 8005e46:	e00b      	b.n	8005e60 <UART_SetConfig+0x10c>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e08b      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	77fb      	strb	r3, [r7, #31]
 8005e52:	e088      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e54:	2304      	movs	r3, #4
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e085      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	77fb      	strb	r3, [r7, #31]
 8005e5e:	e082      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e60:	2310      	movs	r3, #16
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e07f      	b.n	8005f66 <UART_SetConfig+0x212>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a5b      	ldr	r2, [pc, #364]	; (8005fd8 <UART_SetConfig+0x284>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d124      	bne.n	8005eba <UART_SetConfig+0x166>
 8005e70:	4b57      	ldr	r3, [pc, #348]	; (8005fd0 <UART_SetConfig+0x27c>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005e78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e7c:	d011      	beq.n	8005ea2 <UART_SetConfig+0x14e>
 8005e7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005e82:	d817      	bhi.n	8005eb4 <UART_SetConfig+0x160>
 8005e84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e88:	d011      	beq.n	8005eae <UART_SetConfig+0x15a>
 8005e8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e8e:	d811      	bhi.n	8005eb4 <UART_SetConfig+0x160>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <UART_SetConfig+0x148>
 8005e94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e98:	d006      	beq.n	8005ea8 <UART_SetConfig+0x154>
 8005e9a:	e00b      	b.n	8005eb4 <UART_SetConfig+0x160>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e061      	b.n	8005f66 <UART_SetConfig+0x212>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e05e      	b.n	8005f66 <UART_SetConfig+0x212>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e05b      	b.n	8005f66 <UART_SetConfig+0x212>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e058      	b.n	8005f66 <UART_SetConfig+0x212>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e055      	b.n	8005f66 <UART_SetConfig+0x212>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a47      	ldr	r2, [pc, #284]	; (8005fdc <UART_SetConfig+0x288>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d124      	bne.n	8005f0e <UART_SetConfig+0x1ba>
 8005ec4:	4b42      	ldr	r3, [pc, #264]	; (8005fd0 <UART_SetConfig+0x27c>)
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ecc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ed0:	d011      	beq.n	8005ef6 <UART_SetConfig+0x1a2>
 8005ed2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ed6:	d817      	bhi.n	8005f08 <UART_SetConfig+0x1b4>
 8005ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005edc:	d011      	beq.n	8005f02 <UART_SetConfig+0x1ae>
 8005ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ee2:	d811      	bhi.n	8005f08 <UART_SetConfig+0x1b4>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <UART_SetConfig+0x19c>
 8005ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eec:	d006      	beq.n	8005efc <UART_SetConfig+0x1a8>
 8005eee:	e00b      	b.n	8005f08 <UART_SetConfig+0x1b4>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	77fb      	strb	r3, [r7, #31]
 8005ef4:	e037      	b.n	8005f66 <UART_SetConfig+0x212>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	77fb      	strb	r3, [r7, #31]
 8005efa:	e034      	b.n	8005f66 <UART_SetConfig+0x212>
 8005efc:	2304      	movs	r3, #4
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e031      	b.n	8005f66 <UART_SetConfig+0x212>
 8005f02:	2308      	movs	r3, #8
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e02e      	b.n	8005f66 <UART_SetConfig+0x212>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e02b      	b.n	8005f66 <UART_SetConfig+0x212>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a33      	ldr	r2, [pc, #204]	; (8005fe0 <UART_SetConfig+0x28c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d124      	bne.n	8005f62 <UART_SetConfig+0x20e>
 8005f18:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <UART_SetConfig+0x27c>)
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005f20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f24:	d011      	beq.n	8005f4a <UART_SetConfig+0x1f6>
 8005f26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f2a:	d817      	bhi.n	8005f5c <UART_SetConfig+0x208>
 8005f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f30:	d011      	beq.n	8005f56 <UART_SetConfig+0x202>
 8005f32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f36:	d811      	bhi.n	8005f5c <UART_SetConfig+0x208>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <UART_SetConfig+0x1f0>
 8005f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f40:	d006      	beq.n	8005f50 <UART_SetConfig+0x1fc>
 8005f42:	e00b      	b.n	8005f5c <UART_SetConfig+0x208>
 8005f44:	2300      	movs	r3, #0
 8005f46:	77fb      	strb	r3, [r7, #31]
 8005f48:	e00d      	b.n	8005f66 <UART_SetConfig+0x212>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	77fb      	strb	r3, [r7, #31]
 8005f4e:	e00a      	b.n	8005f66 <UART_SetConfig+0x212>
 8005f50:	2304      	movs	r3, #4
 8005f52:	77fb      	strb	r3, [r7, #31]
 8005f54:	e007      	b.n	8005f66 <UART_SetConfig+0x212>
 8005f56:	2308      	movs	r3, #8
 8005f58:	77fb      	strb	r3, [r7, #31]
 8005f5a:	e004      	b.n	8005f66 <UART_SetConfig+0x212>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	77fb      	strb	r3, [r7, #31]
 8005f60:	e001      	b.n	8005f66 <UART_SetConfig+0x212>
 8005f62:	2310      	movs	r3, #16
 8005f64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6e:	d16c      	bne.n	800604a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d838      	bhi.n	8005fe8 <UART_SetConfig+0x294>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x228>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	08005fe9 	.word	0x08005fe9
 8005f8c:	08005fb7 	.word	0x08005fb7
 8005f90:	08005fe9 	.word	0x08005fe9
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005fe9 	.word	0x08005fe9
 8005f9c:	08005fbf 	.word	0x08005fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7fe fda0 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	61b8      	str	r0, [r7, #24]
        break;
 8005fa6:	e024      	b.n	8005ff2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa8:	f7fe fdbe 	bl	8004b28 <HAL_RCC_GetPCLK2Freq>
 8005fac:	61b8      	str	r0, [r7, #24]
        break;
 8005fae:	e020      	b.n	8005ff2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <UART_SetConfig+0x290>)
 8005fb2:	61bb      	str	r3, [r7, #24]
        break;
 8005fb4:	e01d      	b.n	8005ff2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb6:	f7fe fd1f 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 8005fba:	61b8      	str	r0, [r7, #24]
        break;
 8005fbc:	e019      	b.n	8005ff2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc2:	61bb      	str	r3, [r7, #24]
        break;
 8005fc4:	e015      	b.n	8005ff2 <UART_SetConfig+0x29e>
 8005fc6:	bf00      	nop
 8005fc8:	efff69f3 	.word	0xefff69f3
 8005fcc:	40013800 	.word	0x40013800
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	40004400 	.word	0x40004400
 8005fd8:	40004800 	.word	0x40004800
 8005fdc:	40004c00 	.word	0x40004c00
 8005fe0:	40005000 	.word	0x40005000
 8005fe4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	77bb      	strb	r3, [r7, #30]
        break;
 8005ff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d075      	beq.n	80060e4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	005a      	lsls	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	441a      	add	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	b29b      	uxth	r3, r3
 800600e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b0f      	cmp	r3, #15
 8006014:	d916      	bls.n	8006044 <UART_SetConfig+0x2f0>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601c:	d212      	bcs.n	8006044 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f023 030f 	bic.w	r3, r3, #15
 8006026:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	b29b      	uxth	r3, r3
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	b29a      	uxth	r2, r3
 8006034:	89fb      	ldrh	r3, [r7, #14]
 8006036:	4313      	orrs	r3, r2
 8006038:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	89fa      	ldrh	r2, [r7, #14]
 8006040:	60da      	str	r2, [r3, #12]
 8006042:	e04f      	b.n	80060e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	77bb      	strb	r3, [r7, #30]
 8006048:	e04c      	b.n	80060e4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800604a:	7ffb      	ldrb	r3, [r7, #31]
 800604c:	2b08      	cmp	r3, #8
 800604e:	d828      	bhi.n	80060a2 <UART_SetConfig+0x34e>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0x304>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006085 	.word	0x08006085
 8006060:	0800608d 	.word	0x0800608d
 8006064:	080060a3 	.word	0x080060a3
 8006068:	08006093 	.word	0x08006093
 800606c:	080060a3 	.word	0x080060a3
 8006070:	080060a3 	.word	0x080060a3
 8006074:	080060a3 	.word	0x080060a3
 8006078:	0800609b 	.word	0x0800609b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fe fd32 	bl	8004ae4 <HAL_RCC_GetPCLK1Freq>
 8006080:	61b8      	str	r0, [r7, #24]
        break;
 8006082:	e013      	b.n	80060ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006084:	f7fe fd50 	bl	8004b28 <HAL_RCC_GetPCLK2Freq>
 8006088:	61b8      	str	r0, [r7, #24]
        break;
 800608a:	e00f      	b.n	80060ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800608c:	4b1b      	ldr	r3, [pc, #108]	; (80060fc <UART_SetConfig+0x3a8>)
 800608e:	61bb      	str	r3, [r7, #24]
        break;
 8006090:	e00c      	b.n	80060ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006092:	f7fe fcb1 	bl	80049f8 <HAL_RCC_GetSysClockFreq>
 8006096:	61b8      	str	r0, [r7, #24]
        break;
 8006098:	e008      	b.n	80060ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800609e:	61bb      	str	r3, [r7, #24]
        break;
 80060a0:	e004      	b.n	80060ac <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	77bb      	strb	r3, [r7, #30]
        break;
 80060aa:	bf00      	nop
    }

    if (pclk != 0U)
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d018      	beq.n	80060e4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	085a      	lsrs	r2, r3, #1
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	441a      	add	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b0f      	cmp	r3, #15
 80060cc:	d908      	bls.n	80060e0 <UART_SetConfig+0x38c>
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d4:	d204      	bcs.n	80060e0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	e001      	b.n	80060e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80060f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	007a1200 	.word	0x007a1200

08006100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00a      	beq.n	80061d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01a      	beq.n	8006216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061fe:	d10a      	bne.n	8006216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af02      	add	r7, sp, #8
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006254:	f7fb ff0c 	bl	8002070 <HAL_GetTick>
 8006258:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0308 	and.w	r3, r3, #8
 8006264:	2b08      	cmp	r3, #8
 8006266:	d10e      	bne.n	8006286 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f82d 	bl	80062d6 <UART_WaitOnFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e023      	b.n	80062ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b04      	cmp	r3, #4
 8006292:	d10e      	bne.n	80062b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f817 	bl	80062d6 <UART_WaitOnFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e00d      	b.n	80062ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b09c      	sub	sp, #112	; 0x70
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	603b      	str	r3, [r7, #0]
 80062e2:	4613      	mov	r3, r2
 80062e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e6:	e0a5      	b.n	8006434 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ee:	f000 80a1 	beq.w	8006434 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f2:	f7fb febd 	bl	8002070 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <UART_WaitOnFlagUntilTimeout+0x32>
 8006302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006304:	2b00      	cmp	r3, #0
 8006306:	d13e      	bne.n	8006386 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006318:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800631c:	667b      	str	r3, [r7, #100]	; 0x64
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006328:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800632c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e6      	bne.n	8006308 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	f023 0301 	bic.w	r3, r3, #1
 8006350:	663b      	str	r3, [r7, #96]	; 0x60
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800635a:	64ba      	str	r2, [r7, #72]	; 0x48
 800635c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e5      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e067      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d04f      	beq.n	8006434 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a2:	d147      	bne.n	8006434 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e6      	bne.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	613b      	str	r3, [r7, #16]
   return(result);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f023 0301 	bic.w	r3, r3, #1
 80063f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3308      	adds	r3, #8
 80063fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006400:	623a      	str	r2, [r7, #32]
 8006402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	69f9      	ldr	r1, [r7, #28]
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	e841 2300 	strex	r3, r2, [r1]
 800640c:	61bb      	str	r3, [r7, #24]
   return(result);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e5      	bne.n	80063e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e010      	b.n	8006456 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69da      	ldr	r2, [r3, #28]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4013      	ands	r3, r2
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	429a      	cmp	r2, r3
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	429a      	cmp	r2, r3
 8006450:	f43f af4a 	beq.w	80062e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3770      	adds	r7, #112	; 0x70
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <__errno>:
 8006460:	4b01      	ldr	r3, [pc, #4]	; (8006468 <__errno+0x8>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000030 	.word	0x20000030

0800646c <__libc_init_array>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	4d0d      	ldr	r5, [pc, #52]	; (80064a4 <__libc_init_array+0x38>)
 8006470:	4c0d      	ldr	r4, [pc, #52]	; (80064a8 <__libc_init_array+0x3c>)
 8006472:	1b64      	subs	r4, r4, r5
 8006474:	10a4      	asrs	r4, r4, #2
 8006476:	2600      	movs	r6, #0
 8006478:	42a6      	cmp	r6, r4
 800647a:	d109      	bne.n	8006490 <__libc_init_array+0x24>
 800647c:	4d0b      	ldr	r5, [pc, #44]	; (80064ac <__libc_init_array+0x40>)
 800647e:	4c0c      	ldr	r4, [pc, #48]	; (80064b0 <__libc_init_array+0x44>)
 8006480:	f001 f882 	bl	8007588 <_init>
 8006484:	1b64      	subs	r4, r4, r5
 8006486:	10a4      	asrs	r4, r4, #2
 8006488:	2600      	movs	r6, #0
 800648a:	42a6      	cmp	r6, r4
 800648c:	d105      	bne.n	800649a <__libc_init_array+0x2e>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	f855 3b04 	ldr.w	r3, [r5], #4
 8006494:	4798      	blx	r3
 8006496:	3601      	adds	r6, #1
 8006498:	e7ee      	b.n	8006478 <__libc_init_array+0xc>
 800649a:	f855 3b04 	ldr.w	r3, [r5], #4
 800649e:	4798      	blx	r3
 80064a0:	3601      	adds	r6, #1
 80064a2:	e7f2      	b.n	800648a <__libc_init_array+0x1e>
 80064a4:	080077c0 	.word	0x080077c0
 80064a8:	080077c0 	.word	0x080077c0
 80064ac:	080077c0 	.word	0x080077c0
 80064b0:	080077c4 	.word	0x080077c4

080064b4 <memset>:
 80064b4:	4402      	add	r2, r0
 80064b6:	4603      	mov	r3, r0
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d100      	bne.n	80064be <memset+0xa>
 80064bc:	4770      	bx	lr
 80064be:	f803 1b01 	strb.w	r1, [r3], #1
 80064c2:	e7f9      	b.n	80064b8 <memset+0x4>

080064c4 <iprintf>:
 80064c4:	b40f      	push	{r0, r1, r2, r3}
 80064c6:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <iprintf+0x2c>)
 80064c8:	b513      	push	{r0, r1, r4, lr}
 80064ca:	681c      	ldr	r4, [r3, #0]
 80064cc:	b124      	cbz	r4, 80064d8 <iprintf+0x14>
 80064ce:	69a3      	ldr	r3, [r4, #24]
 80064d0:	b913      	cbnz	r3, 80064d8 <iprintf+0x14>
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 fa74 	bl	80069c0 <__sinit>
 80064d8:	ab05      	add	r3, sp, #20
 80064da:	9a04      	ldr	r2, [sp, #16]
 80064dc:	68a1      	ldr	r1, [r4, #8]
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fc7d 	bl	8006de0 <_vfiprintf_r>
 80064e6:	b002      	add	sp, #8
 80064e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ec:	b004      	add	sp, #16
 80064ee:	4770      	bx	lr
 80064f0:	20000030 	.word	0x20000030

080064f4 <putchar>:
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <putchar+0x28>)
 80064f6:	b513      	push	{r0, r1, r4, lr}
 80064f8:	681c      	ldr	r4, [r3, #0]
 80064fa:	4601      	mov	r1, r0
 80064fc:	b134      	cbz	r4, 800650c <putchar+0x18>
 80064fe:	69a3      	ldr	r3, [r4, #24]
 8006500:	b923      	cbnz	r3, 800650c <putchar+0x18>
 8006502:	9001      	str	r0, [sp, #4]
 8006504:	4620      	mov	r0, r4
 8006506:	f000 fa5b 	bl	80069c0 <__sinit>
 800650a:	9901      	ldr	r1, [sp, #4]
 800650c:	68a2      	ldr	r2, [r4, #8]
 800650e:	4620      	mov	r0, r4
 8006510:	b002      	add	sp, #8
 8006512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006516:	f000 bf27 	b.w	8007368 <_putc_r>
 800651a:	bf00      	nop
 800651c:	20000030 	.word	0x20000030

08006520 <_puts_r>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	460e      	mov	r6, r1
 8006524:	4605      	mov	r5, r0
 8006526:	b118      	cbz	r0, 8006530 <_puts_r+0x10>
 8006528:	6983      	ldr	r3, [r0, #24]
 800652a:	b90b      	cbnz	r3, 8006530 <_puts_r+0x10>
 800652c:	f000 fa48 	bl	80069c0 <__sinit>
 8006530:	69ab      	ldr	r3, [r5, #24]
 8006532:	68ac      	ldr	r4, [r5, #8]
 8006534:	b913      	cbnz	r3, 800653c <_puts_r+0x1c>
 8006536:	4628      	mov	r0, r5
 8006538:	f000 fa42 	bl	80069c0 <__sinit>
 800653c:	4b2c      	ldr	r3, [pc, #176]	; (80065f0 <_puts_r+0xd0>)
 800653e:	429c      	cmp	r4, r3
 8006540:	d120      	bne.n	8006584 <_puts_r+0x64>
 8006542:	686c      	ldr	r4, [r5, #4]
 8006544:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006546:	07db      	lsls	r3, r3, #31
 8006548:	d405      	bmi.n	8006556 <_puts_r+0x36>
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	0598      	lsls	r0, r3, #22
 800654e:	d402      	bmi.n	8006556 <_puts_r+0x36>
 8006550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006552:	f000 fad3 	bl	8006afc <__retarget_lock_acquire_recursive>
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	0719      	lsls	r1, r3, #28
 800655a:	d51d      	bpl.n	8006598 <_puts_r+0x78>
 800655c:	6923      	ldr	r3, [r4, #16]
 800655e:	b1db      	cbz	r3, 8006598 <_puts_r+0x78>
 8006560:	3e01      	subs	r6, #1
 8006562:	68a3      	ldr	r3, [r4, #8]
 8006564:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006568:	3b01      	subs	r3, #1
 800656a:	60a3      	str	r3, [r4, #8]
 800656c:	bb39      	cbnz	r1, 80065be <_puts_r+0x9e>
 800656e:	2b00      	cmp	r3, #0
 8006570:	da38      	bge.n	80065e4 <_puts_r+0xc4>
 8006572:	4622      	mov	r2, r4
 8006574:	210a      	movs	r1, #10
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f848 	bl	800660c <__swbuf_r>
 800657c:	3001      	adds	r0, #1
 800657e:	d011      	beq.n	80065a4 <_puts_r+0x84>
 8006580:	250a      	movs	r5, #10
 8006582:	e011      	b.n	80065a8 <_puts_r+0x88>
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <_puts_r+0xd4>)
 8006586:	429c      	cmp	r4, r3
 8006588:	d101      	bne.n	800658e <_puts_r+0x6e>
 800658a:	68ac      	ldr	r4, [r5, #8]
 800658c:	e7da      	b.n	8006544 <_puts_r+0x24>
 800658e:	4b1a      	ldr	r3, [pc, #104]	; (80065f8 <_puts_r+0xd8>)
 8006590:	429c      	cmp	r4, r3
 8006592:	bf08      	it	eq
 8006594:	68ec      	ldreq	r4, [r5, #12]
 8006596:	e7d5      	b.n	8006544 <_puts_r+0x24>
 8006598:	4621      	mov	r1, r4
 800659a:	4628      	mov	r0, r5
 800659c:	f000 f888 	bl	80066b0 <__swsetup_r>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d0dd      	beq.n	8006560 <_puts_r+0x40>
 80065a4:	f04f 35ff 	mov.w	r5, #4294967295
 80065a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065aa:	07da      	lsls	r2, r3, #31
 80065ac:	d405      	bmi.n	80065ba <_puts_r+0x9a>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	059b      	lsls	r3, r3, #22
 80065b2:	d402      	bmi.n	80065ba <_puts_r+0x9a>
 80065b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b6:	f000 faa2 	bl	8006afe <__retarget_lock_release_recursive>
 80065ba:	4628      	mov	r0, r5
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da04      	bge.n	80065cc <_puts_r+0xac>
 80065c2:	69a2      	ldr	r2, [r4, #24]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	dc06      	bgt.n	80065d6 <_puts_r+0xb6>
 80065c8:	290a      	cmp	r1, #10
 80065ca:	d004      	beq.n	80065d6 <_puts_r+0xb6>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	6022      	str	r2, [r4, #0]
 80065d2:	7019      	strb	r1, [r3, #0]
 80065d4:	e7c5      	b.n	8006562 <_puts_r+0x42>
 80065d6:	4622      	mov	r2, r4
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 f817 	bl	800660c <__swbuf_r>
 80065de:	3001      	adds	r0, #1
 80065e0:	d1bf      	bne.n	8006562 <_puts_r+0x42>
 80065e2:	e7df      	b.n	80065a4 <_puts_r+0x84>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	250a      	movs	r5, #10
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	6022      	str	r2, [r4, #0]
 80065ec:	701d      	strb	r5, [r3, #0]
 80065ee:	e7db      	b.n	80065a8 <_puts_r+0x88>
 80065f0:	0800774c 	.word	0x0800774c
 80065f4:	0800776c 	.word	0x0800776c
 80065f8:	0800772c 	.word	0x0800772c

080065fc <puts>:
 80065fc:	4b02      	ldr	r3, [pc, #8]	; (8006608 <puts+0xc>)
 80065fe:	4601      	mov	r1, r0
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	f7ff bf8d 	b.w	8006520 <_puts_r>
 8006606:	bf00      	nop
 8006608:	20000030 	.word	0x20000030

0800660c <__swbuf_r>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	460e      	mov	r6, r1
 8006610:	4614      	mov	r4, r2
 8006612:	4605      	mov	r5, r0
 8006614:	b118      	cbz	r0, 800661e <__swbuf_r+0x12>
 8006616:	6983      	ldr	r3, [r0, #24]
 8006618:	b90b      	cbnz	r3, 800661e <__swbuf_r+0x12>
 800661a:	f000 f9d1 	bl	80069c0 <__sinit>
 800661e:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <__swbuf_r+0x98>)
 8006620:	429c      	cmp	r4, r3
 8006622:	d12b      	bne.n	800667c <__swbuf_r+0x70>
 8006624:	686c      	ldr	r4, [r5, #4]
 8006626:	69a3      	ldr	r3, [r4, #24]
 8006628:	60a3      	str	r3, [r4, #8]
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	071a      	lsls	r2, r3, #28
 800662e:	d52f      	bpl.n	8006690 <__swbuf_r+0x84>
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	b36b      	cbz	r3, 8006690 <__swbuf_r+0x84>
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	1ac0      	subs	r0, r0, r3
 800663a:	6963      	ldr	r3, [r4, #20]
 800663c:	b2f6      	uxtb	r6, r6
 800663e:	4283      	cmp	r3, r0
 8006640:	4637      	mov	r7, r6
 8006642:	dc04      	bgt.n	800664e <__swbuf_r+0x42>
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f926 	bl	8006898 <_fflush_r>
 800664c:	bb30      	cbnz	r0, 800669c <__swbuf_r+0x90>
 800664e:	68a3      	ldr	r3, [r4, #8]
 8006650:	3b01      	subs	r3, #1
 8006652:	60a3      	str	r3, [r4, #8]
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	701e      	strb	r6, [r3, #0]
 800665c:	6963      	ldr	r3, [r4, #20]
 800665e:	3001      	adds	r0, #1
 8006660:	4283      	cmp	r3, r0
 8006662:	d004      	beq.n	800666e <__swbuf_r+0x62>
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	07db      	lsls	r3, r3, #31
 8006668:	d506      	bpl.n	8006678 <__swbuf_r+0x6c>
 800666a:	2e0a      	cmp	r6, #10
 800666c:	d104      	bne.n	8006678 <__swbuf_r+0x6c>
 800666e:	4621      	mov	r1, r4
 8006670:	4628      	mov	r0, r5
 8006672:	f000 f911 	bl	8006898 <_fflush_r>
 8006676:	b988      	cbnz	r0, 800669c <__swbuf_r+0x90>
 8006678:	4638      	mov	r0, r7
 800667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <__swbuf_r+0x9c>)
 800667e:	429c      	cmp	r4, r3
 8006680:	d101      	bne.n	8006686 <__swbuf_r+0x7a>
 8006682:	68ac      	ldr	r4, [r5, #8]
 8006684:	e7cf      	b.n	8006626 <__swbuf_r+0x1a>
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <__swbuf_r+0xa0>)
 8006688:	429c      	cmp	r4, r3
 800668a:	bf08      	it	eq
 800668c:	68ec      	ldreq	r4, [r5, #12]
 800668e:	e7ca      	b.n	8006626 <__swbuf_r+0x1a>
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f80c 	bl	80066b0 <__swsetup_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	d0cb      	beq.n	8006634 <__swbuf_r+0x28>
 800669c:	f04f 37ff 	mov.w	r7, #4294967295
 80066a0:	e7ea      	b.n	8006678 <__swbuf_r+0x6c>
 80066a2:	bf00      	nop
 80066a4:	0800774c 	.word	0x0800774c
 80066a8:	0800776c 	.word	0x0800776c
 80066ac:	0800772c 	.word	0x0800772c

080066b0 <__swsetup_r>:
 80066b0:	4b32      	ldr	r3, [pc, #200]	; (800677c <__swsetup_r+0xcc>)
 80066b2:	b570      	push	{r4, r5, r6, lr}
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	4606      	mov	r6, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	b125      	cbz	r5, 80066c6 <__swsetup_r+0x16>
 80066bc:	69ab      	ldr	r3, [r5, #24]
 80066be:	b913      	cbnz	r3, 80066c6 <__swsetup_r+0x16>
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 f97d 	bl	80069c0 <__sinit>
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <__swsetup_r+0xd0>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	d10f      	bne.n	80066ec <__swsetup_r+0x3c>
 80066cc:	686c      	ldr	r4, [r5, #4]
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066d4:	0719      	lsls	r1, r3, #28
 80066d6:	d42c      	bmi.n	8006732 <__swsetup_r+0x82>
 80066d8:	06dd      	lsls	r5, r3, #27
 80066da:	d411      	bmi.n	8006700 <__swsetup_r+0x50>
 80066dc:	2309      	movs	r3, #9
 80066de:	6033      	str	r3, [r6, #0]
 80066e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ea:	e03e      	b.n	800676a <__swsetup_r+0xba>
 80066ec:	4b25      	ldr	r3, [pc, #148]	; (8006784 <__swsetup_r+0xd4>)
 80066ee:	429c      	cmp	r4, r3
 80066f0:	d101      	bne.n	80066f6 <__swsetup_r+0x46>
 80066f2:	68ac      	ldr	r4, [r5, #8]
 80066f4:	e7eb      	b.n	80066ce <__swsetup_r+0x1e>
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <__swsetup_r+0xd8>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	bf08      	it	eq
 80066fc:	68ec      	ldreq	r4, [r5, #12]
 80066fe:	e7e6      	b.n	80066ce <__swsetup_r+0x1e>
 8006700:	0758      	lsls	r0, r3, #29
 8006702:	d512      	bpl.n	800672a <__swsetup_r+0x7a>
 8006704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006706:	b141      	cbz	r1, 800671a <__swsetup_r+0x6a>
 8006708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800670c:	4299      	cmp	r1, r3
 800670e:	d002      	beq.n	8006716 <__swsetup_r+0x66>
 8006710:	4630      	mov	r0, r6
 8006712:	f000 fa5b 	bl	8006bcc <_free_r>
 8006716:	2300      	movs	r3, #0
 8006718:	6363      	str	r3, [r4, #52]	; 0x34
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	2300      	movs	r3, #0
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	b94b      	cbnz	r3, 800674a <__swsetup_r+0x9a>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800673c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006740:	d003      	beq.n	800674a <__swsetup_r+0x9a>
 8006742:	4621      	mov	r1, r4
 8006744:	4630      	mov	r0, r6
 8006746:	f000 fa01 	bl	8006b4c <__smakebuf_r>
 800674a:	89a0      	ldrh	r0, [r4, #12]
 800674c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006750:	f010 0301 	ands.w	r3, r0, #1
 8006754:	d00a      	beq.n	800676c <__swsetup_r+0xbc>
 8006756:	2300      	movs	r3, #0
 8006758:	60a3      	str	r3, [r4, #8]
 800675a:	6963      	ldr	r3, [r4, #20]
 800675c:	425b      	negs	r3, r3
 800675e:	61a3      	str	r3, [r4, #24]
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	b943      	cbnz	r3, 8006776 <__swsetup_r+0xc6>
 8006764:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006768:	d1ba      	bne.n	80066e0 <__swsetup_r+0x30>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	0781      	lsls	r1, r0, #30
 800676e:	bf58      	it	pl
 8006770:	6963      	ldrpl	r3, [r4, #20]
 8006772:	60a3      	str	r3, [r4, #8]
 8006774:	e7f4      	b.n	8006760 <__swsetup_r+0xb0>
 8006776:	2000      	movs	r0, #0
 8006778:	e7f7      	b.n	800676a <__swsetup_r+0xba>
 800677a:	bf00      	nop
 800677c:	20000030 	.word	0x20000030
 8006780:	0800774c 	.word	0x0800774c
 8006784:	0800776c 	.word	0x0800776c
 8006788:	0800772c 	.word	0x0800772c

0800678c <__sflush_r>:
 800678c:	898a      	ldrh	r2, [r1, #12]
 800678e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006792:	4605      	mov	r5, r0
 8006794:	0710      	lsls	r0, r2, #28
 8006796:	460c      	mov	r4, r1
 8006798:	d458      	bmi.n	800684c <__sflush_r+0xc0>
 800679a:	684b      	ldr	r3, [r1, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	dc05      	bgt.n	80067ac <__sflush_r+0x20>
 80067a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dc02      	bgt.n	80067ac <__sflush_r+0x20>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ae:	2e00      	cmp	r6, #0
 80067b0:	d0f9      	beq.n	80067a6 <__sflush_r+0x1a>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067b8:	682f      	ldr	r7, [r5, #0]
 80067ba:	602b      	str	r3, [r5, #0]
 80067bc:	d032      	beq.n	8006824 <__sflush_r+0x98>
 80067be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	075a      	lsls	r2, r3, #29
 80067c4:	d505      	bpl.n	80067d2 <__sflush_r+0x46>
 80067c6:	6863      	ldr	r3, [r4, #4]
 80067c8:	1ac0      	subs	r0, r0, r3
 80067ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067cc:	b10b      	cbz	r3, 80067d2 <__sflush_r+0x46>
 80067ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067d0:	1ac0      	subs	r0, r0, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	4602      	mov	r2, r0
 80067d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067d8:	6a21      	ldr	r1, [r4, #32]
 80067da:	4628      	mov	r0, r5
 80067dc:	47b0      	blx	r6
 80067de:	1c43      	adds	r3, r0, #1
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	d106      	bne.n	80067f2 <__sflush_r+0x66>
 80067e4:	6829      	ldr	r1, [r5, #0]
 80067e6:	291d      	cmp	r1, #29
 80067e8:	d82c      	bhi.n	8006844 <__sflush_r+0xb8>
 80067ea:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <__sflush_r+0x108>)
 80067ec:	40ca      	lsrs	r2, r1
 80067ee:	07d6      	lsls	r6, r2, #31
 80067f0:	d528      	bpl.n	8006844 <__sflush_r+0xb8>
 80067f2:	2200      	movs	r2, #0
 80067f4:	6062      	str	r2, [r4, #4]
 80067f6:	04d9      	lsls	r1, r3, #19
 80067f8:	6922      	ldr	r2, [r4, #16]
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	d504      	bpl.n	8006808 <__sflush_r+0x7c>
 80067fe:	1c42      	adds	r2, r0, #1
 8006800:	d101      	bne.n	8006806 <__sflush_r+0x7a>
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	b903      	cbnz	r3, 8006808 <__sflush_r+0x7c>
 8006806:	6560      	str	r0, [r4, #84]	; 0x54
 8006808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800680a:	602f      	str	r7, [r5, #0]
 800680c:	2900      	cmp	r1, #0
 800680e:	d0ca      	beq.n	80067a6 <__sflush_r+0x1a>
 8006810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006814:	4299      	cmp	r1, r3
 8006816:	d002      	beq.n	800681e <__sflush_r+0x92>
 8006818:	4628      	mov	r0, r5
 800681a:	f000 f9d7 	bl	8006bcc <_free_r>
 800681e:	2000      	movs	r0, #0
 8006820:	6360      	str	r0, [r4, #52]	; 0x34
 8006822:	e7c1      	b.n	80067a8 <__sflush_r+0x1c>
 8006824:	6a21      	ldr	r1, [r4, #32]
 8006826:	2301      	movs	r3, #1
 8006828:	4628      	mov	r0, r5
 800682a:	47b0      	blx	r6
 800682c:	1c41      	adds	r1, r0, #1
 800682e:	d1c7      	bne.n	80067c0 <__sflush_r+0x34>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0c4      	beq.n	80067c0 <__sflush_r+0x34>
 8006836:	2b1d      	cmp	r3, #29
 8006838:	d001      	beq.n	800683e <__sflush_r+0xb2>
 800683a:	2b16      	cmp	r3, #22
 800683c:	d101      	bne.n	8006842 <__sflush_r+0xb6>
 800683e:	602f      	str	r7, [r5, #0]
 8006840:	e7b1      	b.n	80067a6 <__sflush_r+0x1a>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006848:	81a3      	strh	r3, [r4, #12]
 800684a:	e7ad      	b.n	80067a8 <__sflush_r+0x1c>
 800684c:	690f      	ldr	r7, [r1, #16]
 800684e:	2f00      	cmp	r7, #0
 8006850:	d0a9      	beq.n	80067a6 <__sflush_r+0x1a>
 8006852:	0793      	lsls	r3, r2, #30
 8006854:	680e      	ldr	r6, [r1, #0]
 8006856:	bf08      	it	eq
 8006858:	694b      	ldreq	r3, [r1, #20]
 800685a:	600f      	str	r7, [r1, #0]
 800685c:	bf18      	it	ne
 800685e:	2300      	movne	r3, #0
 8006860:	eba6 0807 	sub.w	r8, r6, r7
 8006864:	608b      	str	r3, [r1, #8]
 8006866:	f1b8 0f00 	cmp.w	r8, #0
 800686a:	dd9c      	ble.n	80067a6 <__sflush_r+0x1a>
 800686c:	6a21      	ldr	r1, [r4, #32]
 800686e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006870:	4643      	mov	r3, r8
 8006872:	463a      	mov	r2, r7
 8006874:	4628      	mov	r0, r5
 8006876:	47b0      	blx	r6
 8006878:	2800      	cmp	r0, #0
 800687a:	dc06      	bgt.n	800688a <__sflush_r+0xfe>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006882:	81a3      	strh	r3, [r4, #12]
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	e78e      	b.n	80067a8 <__sflush_r+0x1c>
 800688a:	4407      	add	r7, r0
 800688c:	eba8 0800 	sub.w	r8, r8, r0
 8006890:	e7e9      	b.n	8006866 <__sflush_r+0xda>
 8006892:	bf00      	nop
 8006894:	20400001 	.word	0x20400001

08006898 <_fflush_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	690b      	ldr	r3, [r1, #16]
 800689c:	4605      	mov	r5, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	b913      	cbnz	r3, 80068a8 <_fflush_r+0x10>
 80068a2:	2500      	movs	r5, #0
 80068a4:	4628      	mov	r0, r5
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	b118      	cbz	r0, 80068b2 <_fflush_r+0x1a>
 80068aa:	6983      	ldr	r3, [r0, #24]
 80068ac:	b90b      	cbnz	r3, 80068b2 <_fflush_r+0x1a>
 80068ae:	f000 f887 	bl	80069c0 <__sinit>
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <_fflush_r+0x6c>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d11b      	bne.n	80068f0 <_fflush_r+0x58>
 80068b8:	686c      	ldr	r4, [r5, #4]
 80068ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ef      	beq.n	80068a2 <_fflush_r+0xa>
 80068c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068c4:	07d0      	lsls	r0, r2, #31
 80068c6:	d404      	bmi.n	80068d2 <_fflush_r+0x3a>
 80068c8:	0599      	lsls	r1, r3, #22
 80068ca:	d402      	bmi.n	80068d2 <_fflush_r+0x3a>
 80068cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ce:	f000 f915 	bl	8006afc <__retarget_lock_acquire_recursive>
 80068d2:	4628      	mov	r0, r5
 80068d4:	4621      	mov	r1, r4
 80068d6:	f7ff ff59 	bl	800678c <__sflush_r>
 80068da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068dc:	07da      	lsls	r2, r3, #31
 80068de:	4605      	mov	r5, r0
 80068e0:	d4e0      	bmi.n	80068a4 <_fflush_r+0xc>
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	059b      	lsls	r3, r3, #22
 80068e6:	d4dd      	bmi.n	80068a4 <_fflush_r+0xc>
 80068e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ea:	f000 f908 	bl	8006afe <__retarget_lock_release_recursive>
 80068ee:	e7d9      	b.n	80068a4 <_fflush_r+0xc>
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <_fflush_r+0x70>)
 80068f2:	429c      	cmp	r4, r3
 80068f4:	d101      	bne.n	80068fa <_fflush_r+0x62>
 80068f6:	68ac      	ldr	r4, [r5, #8]
 80068f8:	e7df      	b.n	80068ba <_fflush_r+0x22>
 80068fa:	4b04      	ldr	r3, [pc, #16]	; (800690c <_fflush_r+0x74>)
 80068fc:	429c      	cmp	r4, r3
 80068fe:	bf08      	it	eq
 8006900:	68ec      	ldreq	r4, [r5, #12]
 8006902:	e7da      	b.n	80068ba <_fflush_r+0x22>
 8006904:	0800774c 	.word	0x0800774c
 8006908:	0800776c 	.word	0x0800776c
 800690c:	0800772c 	.word	0x0800772c

08006910 <std>:
 8006910:	2300      	movs	r3, #0
 8006912:	b510      	push	{r4, lr}
 8006914:	4604      	mov	r4, r0
 8006916:	e9c0 3300 	strd	r3, r3, [r0]
 800691a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800691e:	6083      	str	r3, [r0, #8]
 8006920:	8181      	strh	r1, [r0, #12]
 8006922:	6643      	str	r3, [r0, #100]	; 0x64
 8006924:	81c2      	strh	r2, [r0, #14]
 8006926:	6183      	str	r3, [r0, #24]
 8006928:	4619      	mov	r1, r3
 800692a:	2208      	movs	r2, #8
 800692c:	305c      	adds	r0, #92	; 0x5c
 800692e:	f7ff fdc1 	bl	80064b4 <memset>
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <std+0x38>)
 8006934:	6263      	str	r3, [r4, #36]	; 0x24
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <std+0x3c>)
 8006938:	62a3      	str	r3, [r4, #40]	; 0x28
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <std+0x40>)
 800693c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <std+0x44>)
 8006940:	6224      	str	r4, [r4, #32]
 8006942:	6323      	str	r3, [r4, #48]	; 0x30
 8006944:	bd10      	pop	{r4, pc}
 8006946:	bf00      	nop
 8006948:	08007419 	.word	0x08007419
 800694c:	0800743b 	.word	0x0800743b
 8006950:	08007473 	.word	0x08007473
 8006954:	08007497 	.word	0x08007497

08006958 <_cleanup_r>:
 8006958:	4901      	ldr	r1, [pc, #4]	; (8006960 <_cleanup_r+0x8>)
 800695a:	f000 b8af 	b.w	8006abc <_fwalk_reent>
 800695e:	bf00      	nop
 8006960:	08006899 	.word	0x08006899

08006964 <__sfmoreglue>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	2268      	movs	r2, #104	; 0x68
 8006968:	1e4d      	subs	r5, r1, #1
 800696a:	4355      	muls	r5, r2
 800696c:	460e      	mov	r6, r1
 800696e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006972:	f000 f997 	bl	8006ca4 <_malloc_r>
 8006976:	4604      	mov	r4, r0
 8006978:	b140      	cbz	r0, 800698c <__sfmoreglue+0x28>
 800697a:	2100      	movs	r1, #0
 800697c:	e9c0 1600 	strd	r1, r6, [r0]
 8006980:	300c      	adds	r0, #12
 8006982:	60a0      	str	r0, [r4, #8]
 8006984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006988:	f7ff fd94 	bl	80064b4 <memset>
 800698c:	4620      	mov	r0, r4
 800698e:	bd70      	pop	{r4, r5, r6, pc}

08006990 <__sfp_lock_acquire>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__sfp_lock_acquire+0x8>)
 8006992:	f000 b8b3 	b.w	8006afc <__retarget_lock_acquire_recursive>
 8006996:	bf00      	nop
 8006998:	20000279 	.word	0x20000279

0800699c <__sfp_lock_release>:
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <__sfp_lock_release+0x8>)
 800699e:	f000 b8ae 	b.w	8006afe <__retarget_lock_release_recursive>
 80069a2:	bf00      	nop
 80069a4:	20000279 	.word	0x20000279

080069a8 <__sinit_lock_acquire>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__sinit_lock_acquire+0x8>)
 80069aa:	f000 b8a7 	b.w	8006afc <__retarget_lock_acquire_recursive>
 80069ae:	bf00      	nop
 80069b0:	2000027a 	.word	0x2000027a

080069b4 <__sinit_lock_release>:
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <__sinit_lock_release+0x8>)
 80069b6:	f000 b8a2 	b.w	8006afe <__retarget_lock_release_recursive>
 80069ba:	bf00      	nop
 80069bc:	2000027a 	.word	0x2000027a

080069c0 <__sinit>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	4604      	mov	r4, r0
 80069c4:	f7ff fff0 	bl	80069a8 <__sinit_lock_acquire>
 80069c8:	69a3      	ldr	r3, [r4, #24]
 80069ca:	b11b      	cbz	r3, 80069d4 <__sinit+0x14>
 80069cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d0:	f7ff bff0 	b.w	80069b4 <__sinit_lock_release>
 80069d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069d8:	6523      	str	r3, [r4, #80]	; 0x50
 80069da:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <__sinit+0x68>)
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <__sinit+0x6c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80069e2:	42a3      	cmp	r3, r4
 80069e4:	bf04      	itt	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	61a3      	streq	r3, [r4, #24]
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 f820 	bl	8006a30 <__sfp>
 80069f0:	6060      	str	r0, [r4, #4]
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f81c 	bl	8006a30 <__sfp>
 80069f8:	60a0      	str	r0, [r4, #8]
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 f818 	bl	8006a30 <__sfp>
 8006a00:	2200      	movs	r2, #0
 8006a02:	60e0      	str	r0, [r4, #12]
 8006a04:	2104      	movs	r1, #4
 8006a06:	6860      	ldr	r0, [r4, #4]
 8006a08:	f7ff ff82 	bl	8006910 <std>
 8006a0c:	68a0      	ldr	r0, [r4, #8]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	2109      	movs	r1, #9
 8006a12:	f7ff ff7d 	bl	8006910 <std>
 8006a16:	68e0      	ldr	r0, [r4, #12]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	2112      	movs	r1, #18
 8006a1c:	f7ff ff78 	bl	8006910 <std>
 8006a20:	2301      	movs	r3, #1
 8006a22:	61a3      	str	r3, [r4, #24]
 8006a24:	e7d2      	b.n	80069cc <__sinit+0xc>
 8006a26:	bf00      	nop
 8006a28:	08007728 	.word	0x08007728
 8006a2c:	08006959 	.word	0x08006959

08006a30 <__sfp>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	4607      	mov	r7, r0
 8006a34:	f7ff ffac 	bl	8006990 <__sfp_lock_acquire>
 8006a38:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <__sfp+0x84>)
 8006a3a:	681e      	ldr	r6, [r3, #0]
 8006a3c:	69b3      	ldr	r3, [r6, #24]
 8006a3e:	b913      	cbnz	r3, 8006a46 <__sfp+0x16>
 8006a40:	4630      	mov	r0, r6
 8006a42:	f7ff ffbd 	bl	80069c0 <__sinit>
 8006a46:	3648      	adds	r6, #72	; 0x48
 8006a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	d503      	bpl.n	8006a58 <__sfp+0x28>
 8006a50:	6833      	ldr	r3, [r6, #0]
 8006a52:	b30b      	cbz	r3, 8006a98 <__sfp+0x68>
 8006a54:	6836      	ldr	r6, [r6, #0]
 8006a56:	e7f7      	b.n	8006a48 <__sfp+0x18>
 8006a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a5c:	b9d5      	cbnz	r5, 8006a94 <__sfp+0x64>
 8006a5e:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <__sfp+0x88>)
 8006a60:	60e3      	str	r3, [r4, #12]
 8006a62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a66:	6665      	str	r5, [r4, #100]	; 0x64
 8006a68:	f000 f847 	bl	8006afa <__retarget_lock_init_recursive>
 8006a6c:	f7ff ff96 	bl	800699c <__sfp_lock_release>
 8006a70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a78:	6025      	str	r5, [r4, #0]
 8006a7a:	61a5      	str	r5, [r4, #24]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a84:	f7ff fd16 	bl	80064b4 <memset>
 8006a88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a90:	4620      	mov	r0, r4
 8006a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a94:	3468      	adds	r4, #104	; 0x68
 8006a96:	e7d9      	b.n	8006a4c <__sfp+0x1c>
 8006a98:	2104      	movs	r1, #4
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f7ff ff62 	bl	8006964 <__sfmoreglue>
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	6030      	str	r0, [r6, #0]
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d1d5      	bne.n	8006a54 <__sfp+0x24>
 8006aa8:	f7ff ff78 	bl	800699c <__sfp_lock_release>
 8006aac:	230c      	movs	r3, #12
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	e7ee      	b.n	8006a90 <__sfp+0x60>
 8006ab2:	bf00      	nop
 8006ab4:	08007728 	.word	0x08007728
 8006ab8:	ffff0001 	.word	0xffff0001

08006abc <_fwalk_reent>:
 8006abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	4688      	mov	r8, r1
 8006ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ac8:	2700      	movs	r7, #0
 8006aca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ace:	f1b9 0901 	subs.w	r9, r9, #1
 8006ad2:	d505      	bpl.n	8006ae0 <_fwalk_reent+0x24>
 8006ad4:	6824      	ldr	r4, [r4, #0]
 8006ad6:	2c00      	cmp	r4, #0
 8006ad8:	d1f7      	bne.n	8006aca <_fwalk_reent+0xe>
 8006ada:	4638      	mov	r0, r7
 8006adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae0:	89ab      	ldrh	r3, [r5, #12]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d907      	bls.n	8006af6 <_fwalk_reent+0x3a>
 8006ae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aea:	3301      	adds	r3, #1
 8006aec:	d003      	beq.n	8006af6 <_fwalk_reent+0x3a>
 8006aee:	4629      	mov	r1, r5
 8006af0:	4630      	mov	r0, r6
 8006af2:	47c0      	blx	r8
 8006af4:	4307      	orrs	r7, r0
 8006af6:	3568      	adds	r5, #104	; 0x68
 8006af8:	e7e9      	b.n	8006ace <_fwalk_reent+0x12>

08006afa <__retarget_lock_init_recursive>:
 8006afa:	4770      	bx	lr

08006afc <__retarget_lock_acquire_recursive>:
 8006afc:	4770      	bx	lr

08006afe <__retarget_lock_release_recursive>:
 8006afe:	4770      	bx	lr

08006b00 <__swhatbuf_r>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	460e      	mov	r6, r1
 8006b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	b096      	sub	sp, #88	; 0x58
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	461d      	mov	r5, r3
 8006b10:	da08      	bge.n	8006b24 <__swhatbuf_r+0x24>
 8006b12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	602a      	str	r2, [r5, #0]
 8006b1a:	061a      	lsls	r2, r3, #24
 8006b1c:	d410      	bmi.n	8006b40 <__swhatbuf_r+0x40>
 8006b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b22:	e00e      	b.n	8006b42 <__swhatbuf_r+0x42>
 8006b24:	466a      	mov	r2, sp
 8006b26:	f000 fcdd 	bl	80074e4 <_fstat_r>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	dbf1      	blt.n	8006b12 <__swhatbuf_r+0x12>
 8006b2e:	9a01      	ldr	r2, [sp, #4]
 8006b30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b38:	425a      	negs	r2, r3
 8006b3a:	415a      	adcs	r2, r3
 8006b3c:	602a      	str	r2, [r5, #0]
 8006b3e:	e7ee      	b.n	8006b1e <__swhatbuf_r+0x1e>
 8006b40:	2340      	movs	r3, #64	; 0x40
 8006b42:	2000      	movs	r0, #0
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	b016      	add	sp, #88	; 0x58
 8006b48:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b4c <__smakebuf_r>:
 8006b4c:	898b      	ldrh	r3, [r1, #12]
 8006b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b50:	079d      	lsls	r5, r3, #30
 8006b52:	4606      	mov	r6, r0
 8006b54:	460c      	mov	r4, r1
 8006b56:	d507      	bpl.n	8006b68 <__smakebuf_r+0x1c>
 8006b58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	6123      	str	r3, [r4, #16]
 8006b60:	2301      	movs	r3, #1
 8006b62:	6163      	str	r3, [r4, #20]
 8006b64:	b002      	add	sp, #8
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	ab01      	add	r3, sp, #4
 8006b6a:	466a      	mov	r2, sp
 8006b6c:	f7ff ffc8 	bl	8006b00 <__swhatbuf_r>
 8006b70:	9900      	ldr	r1, [sp, #0]
 8006b72:	4605      	mov	r5, r0
 8006b74:	4630      	mov	r0, r6
 8006b76:	f000 f895 	bl	8006ca4 <_malloc_r>
 8006b7a:	b948      	cbnz	r0, 8006b90 <__smakebuf_r+0x44>
 8006b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b80:	059a      	lsls	r2, r3, #22
 8006b82:	d4ef      	bmi.n	8006b64 <__smakebuf_r+0x18>
 8006b84:	f023 0303 	bic.w	r3, r3, #3
 8006b88:	f043 0302 	orr.w	r3, r3, #2
 8006b8c:	81a3      	strh	r3, [r4, #12]
 8006b8e:	e7e3      	b.n	8006b58 <__smakebuf_r+0xc>
 8006b90:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <__smakebuf_r+0x7c>)
 8006b92:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	6020      	str	r0, [r4, #0]
 8006b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	9b00      	ldr	r3, [sp, #0]
 8006ba0:	6163      	str	r3, [r4, #20]
 8006ba2:	9b01      	ldr	r3, [sp, #4]
 8006ba4:	6120      	str	r0, [r4, #16]
 8006ba6:	b15b      	cbz	r3, 8006bc0 <__smakebuf_r+0x74>
 8006ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bac:	4630      	mov	r0, r6
 8006bae:	f000 fcab 	bl	8007508 <_isatty_r>
 8006bb2:	b128      	cbz	r0, 8006bc0 <__smakebuf_r+0x74>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	89a0      	ldrh	r0, [r4, #12]
 8006bc2:	4305      	orrs	r5, r0
 8006bc4:	81a5      	strh	r5, [r4, #12]
 8006bc6:	e7cd      	b.n	8006b64 <__smakebuf_r+0x18>
 8006bc8:	08006959 	.word	0x08006959

08006bcc <_free_r>:
 8006bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bce:	2900      	cmp	r1, #0
 8006bd0:	d044      	beq.n	8006c5c <_free_r+0x90>
 8006bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd6:	9001      	str	r0, [sp, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f1a1 0404 	sub.w	r4, r1, #4
 8006bde:	bfb8      	it	lt
 8006be0:	18e4      	addlt	r4, r4, r3
 8006be2:	f000 fcb3 	bl	800754c <__malloc_lock>
 8006be6:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <_free_r+0x94>)
 8006be8:	9801      	ldr	r0, [sp, #4]
 8006bea:	6813      	ldr	r3, [r2, #0]
 8006bec:	b933      	cbnz	r3, 8006bfc <_free_r+0x30>
 8006bee:	6063      	str	r3, [r4, #4]
 8006bf0:	6014      	str	r4, [r2, #0]
 8006bf2:	b003      	add	sp, #12
 8006bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bf8:	f000 bcae 	b.w	8007558 <__malloc_unlock>
 8006bfc:	42a3      	cmp	r3, r4
 8006bfe:	d908      	bls.n	8006c12 <_free_r+0x46>
 8006c00:	6825      	ldr	r5, [r4, #0]
 8006c02:	1961      	adds	r1, r4, r5
 8006c04:	428b      	cmp	r3, r1
 8006c06:	bf01      	itttt	eq
 8006c08:	6819      	ldreq	r1, [r3, #0]
 8006c0a:	685b      	ldreq	r3, [r3, #4]
 8006c0c:	1949      	addeq	r1, r1, r5
 8006c0e:	6021      	streq	r1, [r4, #0]
 8006c10:	e7ed      	b.n	8006bee <_free_r+0x22>
 8006c12:	461a      	mov	r2, r3
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	b10b      	cbz	r3, 8006c1c <_free_r+0x50>
 8006c18:	42a3      	cmp	r3, r4
 8006c1a:	d9fa      	bls.n	8006c12 <_free_r+0x46>
 8006c1c:	6811      	ldr	r1, [r2, #0]
 8006c1e:	1855      	adds	r5, r2, r1
 8006c20:	42a5      	cmp	r5, r4
 8006c22:	d10b      	bne.n	8006c3c <_free_r+0x70>
 8006c24:	6824      	ldr	r4, [r4, #0]
 8006c26:	4421      	add	r1, r4
 8006c28:	1854      	adds	r4, r2, r1
 8006c2a:	42a3      	cmp	r3, r4
 8006c2c:	6011      	str	r1, [r2, #0]
 8006c2e:	d1e0      	bne.n	8006bf2 <_free_r+0x26>
 8006c30:	681c      	ldr	r4, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	6053      	str	r3, [r2, #4]
 8006c36:	4421      	add	r1, r4
 8006c38:	6011      	str	r1, [r2, #0]
 8006c3a:	e7da      	b.n	8006bf2 <_free_r+0x26>
 8006c3c:	d902      	bls.n	8006c44 <_free_r+0x78>
 8006c3e:	230c      	movs	r3, #12
 8006c40:	6003      	str	r3, [r0, #0]
 8006c42:	e7d6      	b.n	8006bf2 <_free_r+0x26>
 8006c44:	6825      	ldr	r5, [r4, #0]
 8006c46:	1961      	adds	r1, r4, r5
 8006c48:	428b      	cmp	r3, r1
 8006c4a:	bf04      	itt	eq
 8006c4c:	6819      	ldreq	r1, [r3, #0]
 8006c4e:	685b      	ldreq	r3, [r3, #4]
 8006c50:	6063      	str	r3, [r4, #4]
 8006c52:	bf04      	itt	eq
 8006c54:	1949      	addeq	r1, r1, r5
 8006c56:	6021      	streq	r1, [r4, #0]
 8006c58:	6054      	str	r4, [r2, #4]
 8006c5a:	e7ca      	b.n	8006bf2 <_free_r+0x26>
 8006c5c:	b003      	add	sp, #12
 8006c5e:	bd30      	pop	{r4, r5, pc}
 8006c60:	2000027c 	.word	0x2000027c

08006c64 <sbrk_aligned>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	4e0e      	ldr	r6, [pc, #56]	; (8006ca0 <sbrk_aligned+0x3c>)
 8006c68:	460c      	mov	r4, r1
 8006c6a:	6831      	ldr	r1, [r6, #0]
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	b911      	cbnz	r1, 8006c76 <sbrk_aligned+0x12>
 8006c70:	f000 fbc2 	bl	80073f8 <_sbrk_r>
 8006c74:	6030      	str	r0, [r6, #0]
 8006c76:	4621      	mov	r1, r4
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f000 fbbd 	bl	80073f8 <_sbrk_r>
 8006c7e:	1c43      	adds	r3, r0, #1
 8006c80:	d00a      	beq.n	8006c98 <sbrk_aligned+0x34>
 8006c82:	1cc4      	adds	r4, r0, #3
 8006c84:	f024 0403 	bic.w	r4, r4, #3
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	d007      	beq.n	8006c9c <sbrk_aligned+0x38>
 8006c8c:	1a21      	subs	r1, r4, r0
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 fbb2 	bl	80073f8 <_sbrk_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d101      	bne.n	8006c9c <sbrk_aligned+0x38>
 8006c98:	f04f 34ff 	mov.w	r4, #4294967295
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	20000280 	.word	0x20000280

08006ca4 <_malloc_r>:
 8006ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca8:	1ccd      	adds	r5, r1, #3
 8006caa:	f025 0503 	bic.w	r5, r5, #3
 8006cae:	3508      	adds	r5, #8
 8006cb0:	2d0c      	cmp	r5, #12
 8006cb2:	bf38      	it	cc
 8006cb4:	250c      	movcc	r5, #12
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	4607      	mov	r7, r0
 8006cba:	db01      	blt.n	8006cc0 <_malloc_r+0x1c>
 8006cbc:	42a9      	cmp	r1, r5
 8006cbe:	d905      	bls.n	8006ccc <_malloc_r+0x28>
 8006cc0:	230c      	movs	r3, #12
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	2600      	movs	r6, #0
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ccc:	4e2e      	ldr	r6, [pc, #184]	; (8006d88 <_malloc_r+0xe4>)
 8006cce:	f000 fc3d 	bl	800754c <__malloc_lock>
 8006cd2:	6833      	ldr	r3, [r6, #0]
 8006cd4:	461c      	mov	r4, r3
 8006cd6:	bb34      	cbnz	r4, 8006d26 <_malloc_r+0x82>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f7ff ffc2 	bl	8006c64 <sbrk_aligned>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	d14d      	bne.n	8006d82 <_malloc_r+0xde>
 8006ce6:	6834      	ldr	r4, [r6, #0]
 8006ce8:	4626      	mov	r6, r4
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	d140      	bne.n	8006d70 <_malloc_r+0xcc>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	eb04 0803 	add.w	r8, r4, r3
 8006cf8:	f000 fb7e 	bl	80073f8 <_sbrk_r>
 8006cfc:	4580      	cmp	r8, r0
 8006cfe:	d13a      	bne.n	8006d76 <_malloc_r+0xd2>
 8006d00:	6821      	ldr	r1, [r4, #0]
 8006d02:	3503      	adds	r5, #3
 8006d04:	1a6d      	subs	r5, r5, r1
 8006d06:	f025 0503 	bic.w	r5, r5, #3
 8006d0a:	3508      	adds	r5, #8
 8006d0c:	2d0c      	cmp	r5, #12
 8006d0e:	bf38      	it	cc
 8006d10:	250c      	movcc	r5, #12
 8006d12:	4629      	mov	r1, r5
 8006d14:	4638      	mov	r0, r7
 8006d16:	f7ff ffa5 	bl	8006c64 <sbrk_aligned>
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	d02b      	beq.n	8006d76 <_malloc_r+0xd2>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	442b      	add	r3, r5
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	e00e      	b.n	8006d44 <_malloc_r+0xa0>
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	1b52      	subs	r2, r2, r5
 8006d2a:	d41e      	bmi.n	8006d6a <_malloc_r+0xc6>
 8006d2c:	2a0b      	cmp	r2, #11
 8006d2e:	d916      	bls.n	8006d5e <_malloc_r+0xba>
 8006d30:	1961      	adds	r1, r4, r5
 8006d32:	42a3      	cmp	r3, r4
 8006d34:	6025      	str	r5, [r4, #0]
 8006d36:	bf18      	it	ne
 8006d38:	6059      	strne	r1, [r3, #4]
 8006d3a:	6863      	ldr	r3, [r4, #4]
 8006d3c:	bf08      	it	eq
 8006d3e:	6031      	streq	r1, [r6, #0]
 8006d40:	5162      	str	r2, [r4, r5]
 8006d42:	604b      	str	r3, [r1, #4]
 8006d44:	4638      	mov	r0, r7
 8006d46:	f104 060b 	add.w	r6, r4, #11
 8006d4a:	f000 fc05 	bl	8007558 <__malloc_unlock>
 8006d4e:	f026 0607 	bic.w	r6, r6, #7
 8006d52:	1d23      	adds	r3, r4, #4
 8006d54:	1af2      	subs	r2, r6, r3
 8006d56:	d0b6      	beq.n	8006cc6 <_malloc_r+0x22>
 8006d58:	1b9b      	subs	r3, r3, r6
 8006d5a:	50a3      	str	r3, [r4, r2]
 8006d5c:	e7b3      	b.n	8006cc6 <_malloc_r+0x22>
 8006d5e:	6862      	ldr	r2, [r4, #4]
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	bf0c      	ite	eq
 8006d64:	6032      	streq	r2, [r6, #0]
 8006d66:	605a      	strne	r2, [r3, #4]
 8006d68:	e7ec      	b.n	8006d44 <_malloc_r+0xa0>
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	6864      	ldr	r4, [r4, #4]
 8006d6e:	e7b2      	b.n	8006cd6 <_malloc_r+0x32>
 8006d70:	4634      	mov	r4, r6
 8006d72:	6876      	ldr	r6, [r6, #4]
 8006d74:	e7b9      	b.n	8006cea <_malloc_r+0x46>
 8006d76:	230c      	movs	r3, #12
 8006d78:	603b      	str	r3, [r7, #0]
 8006d7a:	4638      	mov	r0, r7
 8006d7c:	f000 fbec 	bl	8007558 <__malloc_unlock>
 8006d80:	e7a1      	b.n	8006cc6 <_malloc_r+0x22>
 8006d82:	6025      	str	r5, [r4, #0]
 8006d84:	e7de      	b.n	8006d44 <_malloc_r+0xa0>
 8006d86:	bf00      	nop
 8006d88:	2000027c 	.word	0x2000027c

08006d8c <__sfputc_r>:
 8006d8c:	6893      	ldr	r3, [r2, #8]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	b410      	push	{r4}
 8006d94:	6093      	str	r3, [r2, #8]
 8006d96:	da08      	bge.n	8006daa <__sfputc_r+0x1e>
 8006d98:	6994      	ldr	r4, [r2, #24]
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	db01      	blt.n	8006da2 <__sfputc_r+0x16>
 8006d9e:	290a      	cmp	r1, #10
 8006da0:	d103      	bne.n	8006daa <__sfputc_r+0x1e>
 8006da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da6:	f7ff bc31 	b.w	800660c <__swbuf_r>
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	1c58      	adds	r0, r3, #1
 8006dae:	6010      	str	r0, [r2, #0]
 8006db0:	7019      	strb	r1, [r3, #0]
 8006db2:	4608      	mov	r0, r1
 8006db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <__sfputs_r>:
 8006dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbc:	4606      	mov	r6, r0
 8006dbe:	460f      	mov	r7, r1
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	18d5      	adds	r5, r2, r3
 8006dc4:	42ac      	cmp	r4, r5
 8006dc6:	d101      	bne.n	8006dcc <__sfputs_r+0x12>
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e007      	b.n	8006ddc <__sfputs_r+0x22>
 8006dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd0:	463a      	mov	r2, r7
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7ff ffda 	bl	8006d8c <__sfputc_r>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d1f3      	bne.n	8006dc4 <__sfputs_r+0xa>
 8006ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006de0 <_vfiprintf_r>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	460d      	mov	r5, r1
 8006de6:	b09d      	sub	sp, #116	; 0x74
 8006de8:	4614      	mov	r4, r2
 8006dea:	4698      	mov	r8, r3
 8006dec:	4606      	mov	r6, r0
 8006dee:	b118      	cbz	r0, 8006df8 <_vfiprintf_r+0x18>
 8006df0:	6983      	ldr	r3, [r0, #24]
 8006df2:	b90b      	cbnz	r3, 8006df8 <_vfiprintf_r+0x18>
 8006df4:	f7ff fde4 	bl	80069c0 <__sinit>
 8006df8:	4b89      	ldr	r3, [pc, #548]	; (8007020 <_vfiprintf_r+0x240>)
 8006dfa:	429d      	cmp	r5, r3
 8006dfc:	d11b      	bne.n	8006e36 <_vfiprintf_r+0x56>
 8006dfe:	6875      	ldr	r5, [r6, #4]
 8006e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e02:	07d9      	lsls	r1, r3, #31
 8006e04:	d405      	bmi.n	8006e12 <_vfiprintf_r+0x32>
 8006e06:	89ab      	ldrh	r3, [r5, #12]
 8006e08:	059a      	lsls	r2, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_vfiprintf_r+0x32>
 8006e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e0e:	f7ff fe75 	bl	8006afc <__retarget_lock_acquire_recursive>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	071b      	lsls	r3, r3, #28
 8006e16:	d501      	bpl.n	8006e1c <_vfiprintf_r+0x3c>
 8006e18:	692b      	ldr	r3, [r5, #16]
 8006e1a:	b9eb      	cbnz	r3, 8006e58 <_vfiprintf_r+0x78>
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f7ff fc46 	bl	80066b0 <__swsetup_r>
 8006e24:	b1c0      	cbz	r0, 8006e58 <_vfiprintf_r+0x78>
 8006e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e28:	07dc      	lsls	r4, r3, #31
 8006e2a:	d50e      	bpl.n	8006e4a <_vfiprintf_r+0x6a>
 8006e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e30:	b01d      	add	sp, #116	; 0x74
 8006e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e36:	4b7b      	ldr	r3, [pc, #492]	; (8007024 <_vfiprintf_r+0x244>)
 8006e38:	429d      	cmp	r5, r3
 8006e3a:	d101      	bne.n	8006e40 <_vfiprintf_r+0x60>
 8006e3c:	68b5      	ldr	r5, [r6, #8]
 8006e3e:	e7df      	b.n	8006e00 <_vfiprintf_r+0x20>
 8006e40:	4b79      	ldr	r3, [pc, #484]	; (8007028 <_vfiprintf_r+0x248>)
 8006e42:	429d      	cmp	r5, r3
 8006e44:	bf08      	it	eq
 8006e46:	68f5      	ldreq	r5, [r6, #12]
 8006e48:	e7da      	b.n	8006e00 <_vfiprintf_r+0x20>
 8006e4a:	89ab      	ldrh	r3, [r5, #12]
 8006e4c:	0598      	lsls	r0, r3, #22
 8006e4e:	d4ed      	bmi.n	8006e2c <_vfiprintf_r+0x4c>
 8006e50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e52:	f7ff fe54 	bl	8006afe <__retarget_lock_release_recursive>
 8006e56:	e7e9      	b.n	8006e2c <_vfiprintf_r+0x4c>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e5c:	2320      	movs	r3, #32
 8006e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e66:	2330      	movs	r3, #48	; 0x30
 8006e68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800702c <_vfiprintf_r+0x24c>
 8006e6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e70:	f04f 0901 	mov.w	r9, #1
 8006e74:	4623      	mov	r3, r4
 8006e76:	469a      	mov	sl, r3
 8006e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e7c:	b10a      	cbz	r2, 8006e82 <_vfiprintf_r+0xa2>
 8006e7e:	2a25      	cmp	r2, #37	; 0x25
 8006e80:	d1f9      	bne.n	8006e76 <_vfiprintf_r+0x96>
 8006e82:	ebba 0b04 	subs.w	fp, sl, r4
 8006e86:	d00b      	beq.n	8006ea0 <_vfiprintf_r+0xc0>
 8006e88:	465b      	mov	r3, fp
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7ff ff93 	bl	8006dba <__sfputs_r>
 8006e94:	3001      	adds	r0, #1
 8006e96:	f000 80aa 	beq.w	8006fee <_vfiprintf_r+0x20e>
 8006e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e9c:	445a      	add	r2, fp
 8006e9e:	9209      	str	r2, [sp, #36]	; 0x24
 8006ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 80a2 	beq.w	8006fee <_vfiprintf_r+0x20e>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eb4:	f10a 0a01 	add.w	sl, sl, #1
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ec0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ec2:	4654      	mov	r4, sl
 8006ec4:	2205      	movs	r2, #5
 8006ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eca:	4858      	ldr	r0, [pc, #352]	; (800702c <_vfiprintf_r+0x24c>)
 8006ecc:	f7f9 f988 	bl	80001e0 <memchr>
 8006ed0:	9a04      	ldr	r2, [sp, #16]
 8006ed2:	b9d8      	cbnz	r0, 8006f0c <_vfiprintf_r+0x12c>
 8006ed4:	06d1      	lsls	r1, r2, #27
 8006ed6:	bf44      	itt	mi
 8006ed8:	2320      	movmi	r3, #32
 8006eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ede:	0713      	lsls	r3, r2, #28
 8006ee0:	bf44      	itt	mi
 8006ee2:	232b      	movmi	r3, #43	; 0x2b
 8006ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8006eec:	2b2a      	cmp	r3, #42	; 0x2a
 8006eee:	d015      	beq.n	8006f1c <_vfiprintf_r+0x13c>
 8006ef0:	9a07      	ldr	r2, [sp, #28]
 8006ef2:	4654      	mov	r4, sl
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	f04f 0c0a 	mov.w	ip, #10
 8006efa:	4621      	mov	r1, r4
 8006efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f00:	3b30      	subs	r3, #48	; 0x30
 8006f02:	2b09      	cmp	r3, #9
 8006f04:	d94e      	bls.n	8006fa4 <_vfiprintf_r+0x1c4>
 8006f06:	b1b0      	cbz	r0, 8006f36 <_vfiprintf_r+0x156>
 8006f08:	9207      	str	r2, [sp, #28]
 8006f0a:	e014      	b.n	8006f36 <_vfiprintf_r+0x156>
 8006f0c:	eba0 0308 	sub.w	r3, r0, r8
 8006f10:	fa09 f303 	lsl.w	r3, r9, r3
 8006f14:	4313      	orrs	r3, r2
 8006f16:	9304      	str	r3, [sp, #16]
 8006f18:	46a2      	mov	sl, r4
 8006f1a:	e7d2      	b.n	8006ec2 <_vfiprintf_r+0xe2>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	1d19      	adds	r1, r3, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	9103      	str	r1, [sp, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bfbb      	ittet	lt
 8006f28:	425b      	neglt	r3, r3
 8006f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f2e:	9307      	strge	r3, [sp, #28]
 8006f30:	9307      	strlt	r3, [sp, #28]
 8006f32:	bfb8      	it	lt
 8006f34:	9204      	strlt	r2, [sp, #16]
 8006f36:	7823      	ldrb	r3, [r4, #0]
 8006f38:	2b2e      	cmp	r3, #46	; 0x2e
 8006f3a:	d10c      	bne.n	8006f56 <_vfiprintf_r+0x176>
 8006f3c:	7863      	ldrb	r3, [r4, #1]
 8006f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f40:	d135      	bne.n	8006fae <_vfiprintf_r+0x1ce>
 8006f42:	9b03      	ldr	r3, [sp, #12]
 8006f44:	1d1a      	adds	r2, r3, #4
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	9203      	str	r2, [sp, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bfb8      	it	lt
 8006f4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f52:	3402      	adds	r4, #2
 8006f54:	9305      	str	r3, [sp, #20]
 8006f56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800703c <_vfiprintf_r+0x25c>
 8006f5a:	7821      	ldrb	r1, [r4, #0]
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	4650      	mov	r0, sl
 8006f60:	f7f9 f93e 	bl	80001e0 <memchr>
 8006f64:	b140      	cbz	r0, 8006f78 <_vfiprintf_r+0x198>
 8006f66:	2340      	movs	r3, #64	; 0x40
 8006f68:	eba0 000a 	sub.w	r0, r0, sl
 8006f6c:	fa03 f000 	lsl.w	r0, r3, r0
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	4303      	orrs	r3, r0
 8006f74:	3401      	adds	r4, #1
 8006f76:	9304      	str	r3, [sp, #16]
 8006f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f7c:	482c      	ldr	r0, [pc, #176]	; (8007030 <_vfiprintf_r+0x250>)
 8006f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f82:	2206      	movs	r2, #6
 8006f84:	f7f9 f92c 	bl	80001e0 <memchr>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d03f      	beq.n	800700c <_vfiprintf_r+0x22c>
 8006f8c:	4b29      	ldr	r3, [pc, #164]	; (8007034 <_vfiprintf_r+0x254>)
 8006f8e:	bb1b      	cbnz	r3, 8006fd8 <_vfiprintf_r+0x1f8>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	3307      	adds	r3, #7
 8006f94:	f023 0307 	bic.w	r3, r3, #7
 8006f98:	3308      	adds	r3, #8
 8006f9a:	9303      	str	r3, [sp, #12]
 8006f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9e:	443b      	add	r3, r7
 8006fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa2:	e767      	b.n	8006e74 <_vfiprintf_r+0x94>
 8006fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fa8:	460c      	mov	r4, r1
 8006faa:	2001      	movs	r0, #1
 8006fac:	e7a5      	b.n	8006efa <_vfiprintf_r+0x11a>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	3401      	adds	r4, #1
 8006fb2:	9305      	str	r3, [sp, #20]
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f04f 0c0a 	mov.w	ip, #10
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fc0:	3a30      	subs	r2, #48	; 0x30
 8006fc2:	2a09      	cmp	r2, #9
 8006fc4:	d903      	bls.n	8006fce <_vfiprintf_r+0x1ee>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0c5      	beq.n	8006f56 <_vfiprintf_r+0x176>
 8006fca:	9105      	str	r1, [sp, #20]
 8006fcc:	e7c3      	b.n	8006f56 <_vfiprintf_r+0x176>
 8006fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e7f0      	b.n	8006fba <_vfiprintf_r+0x1da>
 8006fd8:	ab03      	add	r3, sp, #12
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	462a      	mov	r2, r5
 8006fde:	4b16      	ldr	r3, [pc, #88]	; (8007038 <_vfiprintf_r+0x258>)
 8006fe0:	a904      	add	r1, sp, #16
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f3af 8000 	nop.w
 8006fe8:	4607      	mov	r7, r0
 8006fea:	1c78      	adds	r0, r7, #1
 8006fec:	d1d6      	bne.n	8006f9c <_vfiprintf_r+0x1bc>
 8006fee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ff0:	07d9      	lsls	r1, r3, #31
 8006ff2:	d405      	bmi.n	8007000 <_vfiprintf_r+0x220>
 8006ff4:	89ab      	ldrh	r3, [r5, #12]
 8006ff6:	059a      	lsls	r2, r3, #22
 8006ff8:	d402      	bmi.n	8007000 <_vfiprintf_r+0x220>
 8006ffa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ffc:	f7ff fd7f 	bl	8006afe <__retarget_lock_release_recursive>
 8007000:	89ab      	ldrh	r3, [r5, #12]
 8007002:	065b      	lsls	r3, r3, #25
 8007004:	f53f af12 	bmi.w	8006e2c <_vfiprintf_r+0x4c>
 8007008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800700a:	e711      	b.n	8006e30 <_vfiprintf_r+0x50>
 800700c:	ab03      	add	r3, sp, #12
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	462a      	mov	r2, r5
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <_vfiprintf_r+0x258>)
 8007014:	a904      	add	r1, sp, #16
 8007016:	4630      	mov	r0, r6
 8007018:	f000 f880 	bl	800711c <_printf_i>
 800701c:	e7e4      	b.n	8006fe8 <_vfiprintf_r+0x208>
 800701e:	bf00      	nop
 8007020:	0800774c 	.word	0x0800774c
 8007024:	0800776c 	.word	0x0800776c
 8007028:	0800772c 	.word	0x0800772c
 800702c:	0800778c 	.word	0x0800778c
 8007030:	08007796 	.word	0x08007796
 8007034:	00000000 	.word	0x00000000
 8007038:	08006dbb 	.word	0x08006dbb
 800703c:	08007792 	.word	0x08007792

08007040 <_printf_common>:
 8007040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	4616      	mov	r6, r2
 8007046:	4699      	mov	r9, r3
 8007048:	688a      	ldr	r2, [r1, #8]
 800704a:	690b      	ldr	r3, [r1, #16]
 800704c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007050:	4293      	cmp	r3, r2
 8007052:	bfb8      	it	lt
 8007054:	4613      	movlt	r3, r2
 8007056:	6033      	str	r3, [r6, #0]
 8007058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800705c:	4607      	mov	r7, r0
 800705e:	460c      	mov	r4, r1
 8007060:	b10a      	cbz	r2, 8007066 <_printf_common+0x26>
 8007062:	3301      	adds	r3, #1
 8007064:	6033      	str	r3, [r6, #0]
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	0699      	lsls	r1, r3, #26
 800706a:	bf42      	ittt	mi
 800706c:	6833      	ldrmi	r3, [r6, #0]
 800706e:	3302      	addmi	r3, #2
 8007070:	6033      	strmi	r3, [r6, #0]
 8007072:	6825      	ldr	r5, [r4, #0]
 8007074:	f015 0506 	ands.w	r5, r5, #6
 8007078:	d106      	bne.n	8007088 <_printf_common+0x48>
 800707a:	f104 0a19 	add.w	sl, r4, #25
 800707e:	68e3      	ldr	r3, [r4, #12]
 8007080:	6832      	ldr	r2, [r6, #0]
 8007082:	1a9b      	subs	r3, r3, r2
 8007084:	42ab      	cmp	r3, r5
 8007086:	dc26      	bgt.n	80070d6 <_printf_common+0x96>
 8007088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800708c:	1e13      	subs	r3, r2, #0
 800708e:	6822      	ldr	r2, [r4, #0]
 8007090:	bf18      	it	ne
 8007092:	2301      	movne	r3, #1
 8007094:	0692      	lsls	r2, r2, #26
 8007096:	d42b      	bmi.n	80070f0 <_printf_common+0xb0>
 8007098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800709c:	4649      	mov	r1, r9
 800709e:	4638      	mov	r0, r7
 80070a0:	47c0      	blx	r8
 80070a2:	3001      	adds	r0, #1
 80070a4:	d01e      	beq.n	80070e4 <_printf_common+0xa4>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	68e5      	ldr	r5, [r4, #12]
 80070aa:	6832      	ldr	r2, [r6, #0]
 80070ac:	f003 0306 	and.w	r3, r3, #6
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	bf08      	it	eq
 80070b4:	1aad      	subeq	r5, r5, r2
 80070b6:	68a3      	ldr	r3, [r4, #8]
 80070b8:	6922      	ldr	r2, [r4, #16]
 80070ba:	bf0c      	ite	eq
 80070bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070c0:	2500      	movne	r5, #0
 80070c2:	4293      	cmp	r3, r2
 80070c4:	bfc4      	itt	gt
 80070c6:	1a9b      	subgt	r3, r3, r2
 80070c8:	18ed      	addgt	r5, r5, r3
 80070ca:	2600      	movs	r6, #0
 80070cc:	341a      	adds	r4, #26
 80070ce:	42b5      	cmp	r5, r6
 80070d0:	d11a      	bne.n	8007108 <_printf_common+0xc8>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e008      	b.n	80070e8 <_printf_common+0xa8>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4652      	mov	r2, sl
 80070da:	4649      	mov	r1, r9
 80070dc:	4638      	mov	r0, r7
 80070de:	47c0      	blx	r8
 80070e0:	3001      	adds	r0, #1
 80070e2:	d103      	bne.n	80070ec <_printf_common+0xac>
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ec:	3501      	adds	r5, #1
 80070ee:	e7c6      	b.n	800707e <_printf_common+0x3e>
 80070f0:	18e1      	adds	r1, r4, r3
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	2030      	movs	r0, #48	; 0x30
 80070f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070fa:	4422      	add	r2, r4
 80070fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007104:	3302      	adds	r3, #2
 8007106:	e7c7      	b.n	8007098 <_printf_common+0x58>
 8007108:	2301      	movs	r3, #1
 800710a:	4622      	mov	r2, r4
 800710c:	4649      	mov	r1, r9
 800710e:	4638      	mov	r0, r7
 8007110:	47c0      	blx	r8
 8007112:	3001      	adds	r0, #1
 8007114:	d0e6      	beq.n	80070e4 <_printf_common+0xa4>
 8007116:	3601      	adds	r6, #1
 8007118:	e7d9      	b.n	80070ce <_printf_common+0x8e>
	...

0800711c <_printf_i>:
 800711c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007120:	7e0f      	ldrb	r7, [r1, #24]
 8007122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007124:	2f78      	cmp	r7, #120	; 0x78
 8007126:	4691      	mov	r9, r2
 8007128:	4680      	mov	r8, r0
 800712a:	460c      	mov	r4, r1
 800712c:	469a      	mov	sl, r3
 800712e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007132:	d807      	bhi.n	8007144 <_printf_i+0x28>
 8007134:	2f62      	cmp	r7, #98	; 0x62
 8007136:	d80a      	bhi.n	800714e <_printf_i+0x32>
 8007138:	2f00      	cmp	r7, #0
 800713a:	f000 80d8 	beq.w	80072ee <_printf_i+0x1d2>
 800713e:	2f58      	cmp	r7, #88	; 0x58
 8007140:	f000 80a3 	beq.w	800728a <_printf_i+0x16e>
 8007144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800714c:	e03a      	b.n	80071c4 <_printf_i+0xa8>
 800714e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007152:	2b15      	cmp	r3, #21
 8007154:	d8f6      	bhi.n	8007144 <_printf_i+0x28>
 8007156:	a101      	add	r1, pc, #4	; (adr r1, 800715c <_printf_i+0x40>)
 8007158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800715c:	080071b5 	.word	0x080071b5
 8007160:	080071c9 	.word	0x080071c9
 8007164:	08007145 	.word	0x08007145
 8007168:	08007145 	.word	0x08007145
 800716c:	08007145 	.word	0x08007145
 8007170:	08007145 	.word	0x08007145
 8007174:	080071c9 	.word	0x080071c9
 8007178:	08007145 	.word	0x08007145
 800717c:	08007145 	.word	0x08007145
 8007180:	08007145 	.word	0x08007145
 8007184:	08007145 	.word	0x08007145
 8007188:	080072d5 	.word	0x080072d5
 800718c:	080071f9 	.word	0x080071f9
 8007190:	080072b7 	.word	0x080072b7
 8007194:	08007145 	.word	0x08007145
 8007198:	08007145 	.word	0x08007145
 800719c:	080072f7 	.word	0x080072f7
 80071a0:	08007145 	.word	0x08007145
 80071a4:	080071f9 	.word	0x080071f9
 80071a8:	08007145 	.word	0x08007145
 80071ac:	08007145 	.word	0x08007145
 80071b0:	080072bf 	.word	0x080072bf
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	1d1a      	adds	r2, r3, #4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	602a      	str	r2, [r5, #0]
 80071bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071c4:	2301      	movs	r3, #1
 80071c6:	e0a3      	b.n	8007310 <_printf_i+0x1f4>
 80071c8:	6820      	ldr	r0, [r4, #0]
 80071ca:	6829      	ldr	r1, [r5, #0]
 80071cc:	0606      	lsls	r6, r0, #24
 80071ce:	f101 0304 	add.w	r3, r1, #4
 80071d2:	d50a      	bpl.n	80071ea <_printf_i+0xce>
 80071d4:	680e      	ldr	r6, [r1, #0]
 80071d6:	602b      	str	r3, [r5, #0]
 80071d8:	2e00      	cmp	r6, #0
 80071da:	da03      	bge.n	80071e4 <_printf_i+0xc8>
 80071dc:	232d      	movs	r3, #45	; 0x2d
 80071de:	4276      	negs	r6, r6
 80071e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071e4:	485e      	ldr	r0, [pc, #376]	; (8007360 <_printf_i+0x244>)
 80071e6:	230a      	movs	r3, #10
 80071e8:	e019      	b.n	800721e <_printf_i+0x102>
 80071ea:	680e      	ldr	r6, [r1, #0]
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071f2:	bf18      	it	ne
 80071f4:	b236      	sxthne	r6, r6
 80071f6:	e7ef      	b.n	80071d8 <_printf_i+0xbc>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	6820      	ldr	r0, [r4, #0]
 80071fc:	1d19      	adds	r1, r3, #4
 80071fe:	6029      	str	r1, [r5, #0]
 8007200:	0601      	lsls	r1, r0, #24
 8007202:	d501      	bpl.n	8007208 <_printf_i+0xec>
 8007204:	681e      	ldr	r6, [r3, #0]
 8007206:	e002      	b.n	800720e <_printf_i+0xf2>
 8007208:	0646      	lsls	r6, r0, #25
 800720a:	d5fb      	bpl.n	8007204 <_printf_i+0xe8>
 800720c:	881e      	ldrh	r6, [r3, #0]
 800720e:	4854      	ldr	r0, [pc, #336]	; (8007360 <_printf_i+0x244>)
 8007210:	2f6f      	cmp	r7, #111	; 0x6f
 8007212:	bf0c      	ite	eq
 8007214:	2308      	moveq	r3, #8
 8007216:	230a      	movne	r3, #10
 8007218:	2100      	movs	r1, #0
 800721a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800721e:	6865      	ldr	r5, [r4, #4]
 8007220:	60a5      	str	r5, [r4, #8]
 8007222:	2d00      	cmp	r5, #0
 8007224:	bfa2      	ittt	ge
 8007226:	6821      	ldrge	r1, [r4, #0]
 8007228:	f021 0104 	bicge.w	r1, r1, #4
 800722c:	6021      	strge	r1, [r4, #0]
 800722e:	b90e      	cbnz	r6, 8007234 <_printf_i+0x118>
 8007230:	2d00      	cmp	r5, #0
 8007232:	d04d      	beq.n	80072d0 <_printf_i+0x1b4>
 8007234:	4615      	mov	r5, r2
 8007236:	fbb6 f1f3 	udiv	r1, r6, r3
 800723a:	fb03 6711 	mls	r7, r3, r1, r6
 800723e:	5dc7      	ldrb	r7, [r0, r7]
 8007240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007244:	4637      	mov	r7, r6
 8007246:	42bb      	cmp	r3, r7
 8007248:	460e      	mov	r6, r1
 800724a:	d9f4      	bls.n	8007236 <_printf_i+0x11a>
 800724c:	2b08      	cmp	r3, #8
 800724e:	d10b      	bne.n	8007268 <_printf_i+0x14c>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	07de      	lsls	r6, r3, #31
 8007254:	d508      	bpl.n	8007268 <_printf_i+0x14c>
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6861      	ldr	r1, [r4, #4]
 800725a:	4299      	cmp	r1, r3
 800725c:	bfde      	ittt	le
 800725e:	2330      	movle	r3, #48	; 0x30
 8007260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007268:	1b52      	subs	r2, r2, r5
 800726a:	6122      	str	r2, [r4, #16]
 800726c:	f8cd a000 	str.w	sl, [sp]
 8007270:	464b      	mov	r3, r9
 8007272:	aa03      	add	r2, sp, #12
 8007274:	4621      	mov	r1, r4
 8007276:	4640      	mov	r0, r8
 8007278:	f7ff fee2 	bl	8007040 <_printf_common>
 800727c:	3001      	adds	r0, #1
 800727e:	d14c      	bne.n	800731a <_printf_i+0x1fe>
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	b004      	add	sp, #16
 8007286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728a:	4835      	ldr	r0, [pc, #212]	; (8007360 <_printf_i+0x244>)
 800728c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007290:	6829      	ldr	r1, [r5, #0]
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	f851 6b04 	ldr.w	r6, [r1], #4
 8007298:	6029      	str	r1, [r5, #0]
 800729a:	061d      	lsls	r5, r3, #24
 800729c:	d514      	bpl.n	80072c8 <_printf_i+0x1ac>
 800729e:	07df      	lsls	r7, r3, #31
 80072a0:	bf44      	itt	mi
 80072a2:	f043 0320 	orrmi.w	r3, r3, #32
 80072a6:	6023      	strmi	r3, [r4, #0]
 80072a8:	b91e      	cbnz	r6, 80072b2 <_printf_i+0x196>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	f023 0320 	bic.w	r3, r3, #32
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	2310      	movs	r3, #16
 80072b4:	e7b0      	b.n	8007218 <_printf_i+0xfc>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	f043 0320 	orr.w	r3, r3, #32
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	2378      	movs	r3, #120	; 0x78
 80072c0:	4828      	ldr	r0, [pc, #160]	; (8007364 <_printf_i+0x248>)
 80072c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072c6:	e7e3      	b.n	8007290 <_printf_i+0x174>
 80072c8:	0659      	lsls	r1, r3, #25
 80072ca:	bf48      	it	mi
 80072cc:	b2b6      	uxthmi	r6, r6
 80072ce:	e7e6      	b.n	800729e <_printf_i+0x182>
 80072d0:	4615      	mov	r5, r2
 80072d2:	e7bb      	b.n	800724c <_printf_i+0x130>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	6826      	ldr	r6, [r4, #0]
 80072d8:	6961      	ldr	r1, [r4, #20]
 80072da:	1d18      	adds	r0, r3, #4
 80072dc:	6028      	str	r0, [r5, #0]
 80072de:	0635      	lsls	r5, r6, #24
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	d501      	bpl.n	80072e8 <_printf_i+0x1cc>
 80072e4:	6019      	str	r1, [r3, #0]
 80072e6:	e002      	b.n	80072ee <_printf_i+0x1d2>
 80072e8:	0670      	lsls	r0, r6, #25
 80072ea:	d5fb      	bpl.n	80072e4 <_printf_i+0x1c8>
 80072ec:	8019      	strh	r1, [r3, #0]
 80072ee:	2300      	movs	r3, #0
 80072f0:	6123      	str	r3, [r4, #16]
 80072f2:	4615      	mov	r5, r2
 80072f4:	e7ba      	b.n	800726c <_printf_i+0x150>
 80072f6:	682b      	ldr	r3, [r5, #0]
 80072f8:	1d1a      	adds	r2, r3, #4
 80072fa:	602a      	str	r2, [r5, #0]
 80072fc:	681d      	ldr	r5, [r3, #0]
 80072fe:	6862      	ldr	r2, [r4, #4]
 8007300:	2100      	movs	r1, #0
 8007302:	4628      	mov	r0, r5
 8007304:	f7f8 ff6c 	bl	80001e0 <memchr>
 8007308:	b108      	cbz	r0, 800730e <_printf_i+0x1f2>
 800730a:	1b40      	subs	r0, r0, r5
 800730c:	6060      	str	r0, [r4, #4]
 800730e:	6863      	ldr	r3, [r4, #4]
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	2300      	movs	r3, #0
 8007314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007318:	e7a8      	b.n	800726c <_printf_i+0x150>
 800731a:	6923      	ldr	r3, [r4, #16]
 800731c:	462a      	mov	r2, r5
 800731e:	4649      	mov	r1, r9
 8007320:	4640      	mov	r0, r8
 8007322:	47d0      	blx	sl
 8007324:	3001      	adds	r0, #1
 8007326:	d0ab      	beq.n	8007280 <_printf_i+0x164>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	079b      	lsls	r3, r3, #30
 800732c:	d413      	bmi.n	8007356 <_printf_i+0x23a>
 800732e:	68e0      	ldr	r0, [r4, #12]
 8007330:	9b03      	ldr	r3, [sp, #12]
 8007332:	4298      	cmp	r0, r3
 8007334:	bfb8      	it	lt
 8007336:	4618      	movlt	r0, r3
 8007338:	e7a4      	b.n	8007284 <_printf_i+0x168>
 800733a:	2301      	movs	r3, #1
 800733c:	4632      	mov	r2, r6
 800733e:	4649      	mov	r1, r9
 8007340:	4640      	mov	r0, r8
 8007342:	47d0      	blx	sl
 8007344:	3001      	adds	r0, #1
 8007346:	d09b      	beq.n	8007280 <_printf_i+0x164>
 8007348:	3501      	adds	r5, #1
 800734a:	68e3      	ldr	r3, [r4, #12]
 800734c:	9903      	ldr	r1, [sp, #12]
 800734e:	1a5b      	subs	r3, r3, r1
 8007350:	42ab      	cmp	r3, r5
 8007352:	dcf2      	bgt.n	800733a <_printf_i+0x21e>
 8007354:	e7eb      	b.n	800732e <_printf_i+0x212>
 8007356:	2500      	movs	r5, #0
 8007358:	f104 0619 	add.w	r6, r4, #25
 800735c:	e7f5      	b.n	800734a <_printf_i+0x22e>
 800735e:	bf00      	nop
 8007360:	0800779d 	.word	0x0800779d
 8007364:	080077ae 	.word	0x080077ae

08007368 <_putc_r>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	460d      	mov	r5, r1
 800736c:	4614      	mov	r4, r2
 800736e:	4606      	mov	r6, r0
 8007370:	b118      	cbz	r0, 800737a <_putc_r+0x12>
 8007372:	6983      	ldr	r3, [r0, #24]
 8007374:	b90b      	cbnz	r3, 800737a <_putc_r+0x12>
 8007376:	f7ff fb23 	bl	80069c0 <__sinit>
 800737a:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <_putc_r+0x84>)
 800737c:	429c      	cmp	r4, r3
 800737e:	d124      	bne.n	80073ca <_putc_r+0x62>
 8007380:	6874      	ldr	r4, [r6, #4]
 8007382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007384:	07d8      	lsls	r0, r3, #31
 8007386:	d405      	bmi.n	8007394 <_putc_r+0x2c>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	0599      	lsls	r1, r3, #22
 800738c:	d402      	bmi.n	8007394 <_putc_r+0x2c>
 800738e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007390:	f7ff fbb4 	bl	8006afc <__retarget_lock_acquire_recursive>
 8007394:	68a3      	ldr	r3, [r4, #8]
 8007396:	3b01      	subs	r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	60a3      	str	r3, [r4, #8]
 800739c:	da05      	bge.n	80073aa <_putc_r+0x42>
 800739e:	69a2      	ldr	r2, [r4, #24]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	db1c      	blt.n	80073de <_putc_r+0x76>
 80073a4:	b2eb      	uxtb	r3, r5
 80073a6:	2b0a      	cmp	r3, #10
 80073a8:	d019      	beq.n	80073de <_putc_r+0x76>
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	6022      	str	r2, [r4, #0]
 80073b0:	701d      	strb	r5, [r3, #0]
 80073b2:	b2ed      	uxtb	r5, r5
 80073b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073b6:	07da      	lsls	r2, r3, #31
 80073b8:	d405      	bmi.n	80073c6 <_putc_r+0x5e>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	059b      	lsls	r3, r3, #22
 80073be:	d402      	bmi.n	80073c6 <_putc_r+0x5e>
 80073c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073c2:	f7ff fb9c 	bl	8006afe <__retarget_lock_release_recursive>
 80073c6:	4628      	mov	r0, r5
 80073c8:	bd70      	pop	{r4, r5, r6, pc}
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <_putc_r+0x88>)
 80073cc:	429c      	cmp	r4, r3
 80073ce:	d101      	bne.n	80073d4 <_putc_r+0x6c>
 80073d0:	68b4      	ldr	r4, [r6, #8]
 80073d2:	e7d6      	b.n	8007382 <_putc_r+0x1a>
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <_putc_r+0x8c>)
 80073d6:	429c      	cmp	r4, r3
 80073d8:	bf08      	it	eq
 80073da:	68f4      	ldreq	r4, [r6, #12]
 80073dc:	e7d1      	b.n	8007382 <_putc_r+0x1a>
 80073de:	4629      	mov	r1, r5
 80073e0:	4622      	mov	r2, r4
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7ff f912 	bl	800660c <__swbuf_r>
 80073e8:	4605      	mov	r5, r0
 80073ea:	e7e3      	b.n	80073b4 <_putc_r+0x4c>
 80073ec:	0800774c 	.word	0x0800774c
 80073f0:	0800776c 	.word	0x0800776c
 80073f4:	0800772c 	.word	0x0800772c

080073f8 <_sbrk_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4d06      	ldr	r5, [pc, #24]	; (8007414 <_sbrk_r+0x1c>)
 80073fc:	2300      	movs	r3, #0
 80073fe:	4604      	mov	r4, r0
 8007400:	4608      	mov	r0, r1
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	f7fa fd68 	bl	8001ed8 <_sbrk>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_sbrk_r+0x1a>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_sbrk_r+0x1a>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000284 	.word	0x20000284

08007418 <__sread>:
 8007418:	b510      	push	{r4, lr}
 800741a:	460c      	mov	r4, r1
 800741c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007420:	f000 f8a0 	bl	8007564 <_read_r>
 8007424:	2800      	cmp	r0, #0
 8007426:	bfab      	itete	ge
 8007428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800742a:	89a3      	ldrhlt	r3, [r4, #12]
 800742c:	181b      	addge	r3, r3, r0
 800742e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007432:	bfac      	ite	ge
 8007434:	6563      	strge	r3, [r4, #84]	; 0x54
 8007436:	81a3      	strhlt	r3, [r4, #12]
 8007438:	bd10      	pop	{r4, pc}

0800743a <__swrite>:
 800743a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800743e:	461f      	mov	r7, r3
 8007440:	898b      	ldrh	r3, [r1, #12]
 8007442:	05db      	lsls	r3, r3, #23
 8007444:	4605      	mov	r5, r0
 8007446:	460c      	mov	r4, r1
 8007448:	4616      	mov	r6, r2
 800744a:	d505      	bpl.n	8007458 <__swrite+0x1e>
 800744c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007450:	2302      	movs	r3, #2
 8007452:	2200      	movs	r2, #0
 8007454:	f000 f868 	bl	8007528 <_lseek_r>
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800745e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007462:	81a3      	strh	r3, [r4, #12]
 8007464:	4632      	mov	r2, r6
 8007466:	463b      	mov	r3, r7
 8007468:	4628      	mov	r0, r5
 800746a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800746e:	f000 b817 	b.w	80074a0 <_write_r>

08007472 <__sseek>:
 8007472:	b510      	push	{r4, lr}
 8007474:	460c      	mov	r4, r1
 8007476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747a:	f000 f855 	bl	8007528 <_lseek_r>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	bf15      	itete	ne
 8007484:	6560      	strne	r0, [r4, #84]	; 0x54
 8007486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800748a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800748e:	81a3      	strheq	r3, [r4, #12]
 8007490:	bf18      	it	ne
 8007492:	81a3      	strhne	r3, [r4, #12]
 8007494:	bd10      	pop	{r4, pc}

08007496 <__sclose>:
 8007496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800749a:	f000 b813 	b.w	80074c4 <_close_r>
	...

080074a0 <_write_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d07      	ldr	r5, [pc, #28]	; (80074c0 <_write_r+0x20>)
 80074a4:	4604      	mov	r4, r0
 80074a6:	4608      	mov	r0, r1
 80074a8:	4611      	mov	r1, r2
 80074aa:	2200      	movs	r2, #0
 80074ac:	602a      	str	r2, [r5, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f7fa fcc1 	bl	8001e36 <_write>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_write_r+0x1e>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_write_r+0x1e>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20000284 	.word	0x20000284

080074c4 <_close_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4d06      	ldr	r5, [pc, #24]	; (80074e0 <_close_r+0x1c>)
 80074c8:	2300      	movs	r3, #0
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	f7fa fccd 	bl	8001e6e <_close>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_close_r+0x1a>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_close_r+0x1a>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20000284 	.word	0x20000284

080074e4 <_fstat_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d07      	ldr	r5, [pc, #28]	; (8007504 <_fstat_r+0x20>)
 80074e8:	2300      	movs	r3, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	4608      	mov	r0, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	f7fa fcc8 	bl	8001e86 <_fstat>
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	d102      	bne.n	8007500 <_fstat_r+0x1c>
 80074fa:	682b      	ldr	r3, [r5, #0]
 80074fc:	b103      	cbz	r3, 8007500 <_fstat_r+0x1c>
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	bd38      	pop	{r3, r4, r5, pc}
 8007502:	bf00      	nop
 8007504:	20000284 	.word	0x20000284

08007508 <_isatty_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d06      	ldr	r5, [pc, #24]	; (8007524 <_isatty_r+0x1c>)
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7fa fcc7 	bl	8001ea6 <_isatty>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_isatty_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_isatty_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20000284 	.word	0x20000284

08007528 <_lseek_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	; (8007548 <_lseek_r+0x20>)
 800752c:	4604      	mov	r4, r0
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	2200      	movs	r2, #0
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7fa fcc0 	bl	8001ebc <_lseek>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_lseek_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_lseek_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20000284 	.word	0x20000284

0800754c <__malloc_lock>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__malloc_lock+0x8>)
 800754e:	f7ff bad5 	b.w	8006afc <__retarget_lock_acquire_recursive>
 8007552:	bf00      	nop
 8007554:	20000278 	.word	0x20000278

08007558 <__malloc_unlock>:
 8007558:	4801      	ldr	r0, [pc, #4]	; (8007560 <__malloc_unlock+0x8>)
 800755a:	f7ff bad0 	b.w	8006afe <__retarget_lock_release_recursive>
 800755e:	bf00      	nop
 8007560:	20000278 	.word	0x20000278

08007564 <_read_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d07      	ldr	r5, [pc, #28]	; (8007584 <_read_r+0x20>)
 8007568:	4604      	mov	r4, r0
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	2200      	movs	r2, #0
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7fa fc42 	bl	8001dfc <_read>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_read_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_read_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20000284 	.word	0x20000284

08007588 <_init>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr

08007594 <_fini>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	bf00      	nop
 8007598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	469e      	mov	lr, r3
 800759e:	4770      	bx	lr
